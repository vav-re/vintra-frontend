/*
 * VINTRA - Aplicativo de Análise Dimensional Clínica
 * CSS Refatorado e Otimizado
 * Visualização Integrativa Trajetorial
 */

/*--------------------------------*
 * Variáveis e Configurações Raiz *
 *--------------------------------*/
:root {
    /* Paleta Monocromática - Baseada no Logo Turquesa */
    --teal-50: rgba(236, 254, 255, 1);
    --teal-100: rgba(209, 250, 254, 1);
    --teal-200: rgba(165, 243, 252, 1);
    --teal-300: rgba(103, 232, 249, 1);
    --teal-400: rgba(34, 211, 238, 1);
    --teal-500: rgba(6, 182, 212, 1);
    --teal-600: rgba(8, 145, 178, 1);
    --teal-700: rgba(12, 116, 141, 1);
    --teal-800: rgba(14, 94, 111, 1);
    --teal-900: rgba(8, 51, 68, 1);
    --teal-950: rgba(4, 30, 41, 1);

    /* Tons de Cinza Refinados */
    --gray-50: rgba(250, 250, 252, 1);
    --gray-100: rgba(245, 245, 250, 1);
    --gray-200: rgba(236, 237, 242, 1);
    --gray-300: rgba(226, 228, 236, 1);
    --gray-400: rgba(209, 211, 222, 1);
    --gray-500: rgba(163, 166, 183, 1);
    --gray-600: rgba(119, 123, 146, 1);
    --gray-700: rgba(85, 88, 105, 1);
    --gray-800: rgba(52, 54, 65, 1);
    --gray-900: rgba(34, 35, 42, 1);
    --gray-950: rgba(24, 25, 30, 1);

    /* Cores Funcionais */
    --accent-subtle: rgba(6, 182, 212, 0.08);
    --accent-light: rgba(6, 182, 212, 0.2);
    --accent: rgba(6, 182, 212, 0.9);
    --accent-vivid: rgba(6, 182, 212, 1);
    --accent-dark: rgba(8, 51, 68, 1);

    --success-subtle: rgba(16, 185, 129, 0.08);
    --success-light: rgba(16, 185, 129, 0.2);
    --success: rgba(16, 185, 129, 0.8);
    --success-vivid: rgba(16, 185, 129, 1);

    --error-subtle: rgba(239, 68, 68, 0.08);
    --error-light: rgba(239, 68, 68, 0.2);
    --error: rgba(239, 68, 68, 0.8);
    --error-vivid: rgba(239, 68, 68, 1);

    --warning-subtle: rgba(245, 158, 11, 0.08);
    --warning-light: rgba(245, 158, 11, 0.2);
    --warning: rgba(245, 158, 11, 0.8);
    --warning-vivid: rgba(245, 158, 11, 1);

    /* Cores de Superfície */
    --surface-white: rgba(255, 255, 255, 1);
    --surface-hover: rgba(245, 245, 250, 0.7);
    --surface-background: rgba(250, 250, 252, 1);
    --surface-raised: rgba(255, 255, 255, 0.6);
    --surface-overlay: rgba(255, 255, 255, 0.85);
    --surface-card: rgba(255, 255, 255, 0.7);
    --surface-modal: rgba(255, 255, 255, 0.9);

    /* Cores de Texto */
    --text-primary: rgba(34, 35, 42, 0.95);
    --text-secondary: rgba(85, 88, 105, 0.9);
    --text-tertiary: rgba(119, 123, 146, 0.8);
    --text-disabled: rgba(119, 123, 146, 0.5);
    --text-on-accent: rgba(255, 255, 255, 0.95);
    --text-on-dark: rgba(255, 255, 255, 0.95);

    /* Efeitos Visuais */
    --shadow-sm: 0 2px 8px rgba(0, 0, 0, 0.03), 0 1px 2px rgba(0, 0, 0, 0.02);
    --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.05), 0 2px 4px rgba(0, 0, 0, 0.03);
    --shadow-lg: 0 8px 24px rgba(0, 0, 0, 0.06), 0 4px 8px rgba(0, 0, 0, 0.04);
    --shadow-xl: 0 16px 42px rgba(0, 0, 0, 0.08), 0 6px 16px rgba(0, 0, 0, 0.05);
    --shadow-inner: inset 0 2px 4px rgba(0, 0, 0, 0.05);

    --blur-sm: 6px;
    --blur-md: 12px;
    --blur-lg: 24px;

    /* Raios */
    --radius-sm: 4px;
    --radius-md: 8px;
    --radius-lg: 12px;
    --radius-xl: 16px;
    --radius-2xl: 24px;
    --radius-full: 9999px;

    /* Bordas */
    --border-color: var(--gray-200);
    --border-color-light: rgba(209, 211, 222, 0.3);

    /* Gradientes Sutis */
    --gradient-subtle-gray: linear-gradient(120deg, var(--gray-50), var(--gray-100));
    --gradient-glass: linear-gradient(120deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.3));
    --gradient-light-accent: linear-gradient(120deg, rgba(6, 182, 212, 0.04), rgba(6, 182, 212, 0.01));
    --gradient-teal: linear-gradient(135deg, var(--teal-500), var(--teal-700));
    --gradient-teal-light: linear-gradient(135deg, var(--teal-300), var(--teal-500));
    --gradient-teal-dark: linear-gradient(135deg, var(--teal-700), var(--teal-900));

    /* Curvas de Animação */
    --ease-in-out: cubic-bezier(0.45, 0, 0.15, 1);
    --ease-out: cubic-bezier(0.17, 0.67, 0.35, 0.99);
    --ease-elastic: cubic-bezier(0.32, 1.75, 0.65, 0.88);
    --ease-bounce: cubic-bezier(0.22, 1.35, 0.32, 1);
    --ease-gentle: cubic-bezier(0.45, 0.05, 0.35, 1);

    /* Durações de Animação */
    --duration-xs: 100ms;
    --duration-sm: 200ms;
    --duration-md: 300ms;
    --duration-lg: 500ms;
    --duration-xl: 800ms;

    /* Tamanhos de Componentes */
    --space-1: 4px;
    --space-2: 8px;
    --space-3: 12px;
    --space-4: 16px;
    --space-5: 20px;
    --space-6: 24px;
    --space-8: 32px;
    --space-10: 40px;
    --space-12: 48px;
    --space-16: 64px;
    --space-20: 80px;

    /* Fontes */
    --font-body: 'Manrope', 'Space Grotesk', sans-serif;
    --font-heading: 'Sora', 'Space Grotesk', sans-serif;
}

/*-----------------*
 * Reset & Globals *
 *-----------------*/
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: var(--font-body);
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

/* Headings use Sora font */
h1, h2, h3, h4, h5, h6, .app-title, .dashboard-title, .recording-title, .upload-title, 
.library-title, .section-title, .login-heading, .modal-title, .patient-name {
    font-family: var(--font-heading);
    letter-spacing: -0.03em;
    line-height: 1.3;
    font-weight: 600;
}

::selection {
    background: var(--accent-light);
    color: var(--text-primary);
}

html {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

body {
    background: var(--gradient-subtle-gray);
    color: var(--text-primary);
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    position: relative;
    overflow-x: hidden;
    letter-spacing: -0.01em;
    line-height: 1.6;
}

/* Subtle Background Animation */
body::before {
    content: "";
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(120deg,
        rgba(255, 255, 255, 0) 20%,
        rgba(103, 232, 249, 0.03) 50%,
        rgba(255, 255, 255, 0) 80%);
    opacity: 0.4;
    z-index: -1;
    animation: subtleGlow 25s infinite alternate ease-in-out;
}

@keyframes subtleGlow {
    0% { transform: scale(1) translateX(-10%) translateY(-5%); }
    100% { transform: scale(1.1) translateX(10%) translateY(5%); }
}

/* Scrollbar Styling */
::-webkit-scrollbar {
    width: 6px;
    height: 6px;
}

::-webkit-scrollbar-track {
    background: transparent;
}

::-webkit-scrollbar-thumb {
    background: var(--gray-400);
    border-radius: var(--radius-full);
}

::-webkit-scrollbar-thumb:hover {
    background: var(--gray-500);
}

/*--------------------*
 * Splash Screen Logo *
 *--------------------*/
#splashScreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--teal-950); /* Background cor do logo */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 2000; /* Highest z-index */
    opacity: 1;
    visibility: visible;
    transition: opacity 1s ease-in-out, visibility 1s ease-in-out;
}

#splashScreen.hidden {
    opacity: 0;
    visibility: hidden;
}

#logo-container {
    width: 550px; /* Adjust size as needed */
    height: 550px;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
}

#vintra-logo {
    width: 100%;
    height: 100%;
    filter: drop-shadow(0 0 8px rgba(6, 182, 212, 0.3));
}

#vintra-logo path { /* Target paths within the SVG */
    fill: none;
    stroke: rgba(6, 182, 212, 0.9);
    stroke-width: 4;
    stroke-linecap: round;
    stroke-linejoin: round;
    transition: all 1s ease;
}

.background-glow {
    position: absolute;
    width: 85%;
    height: 85%;
    background: radial-gradient(circle, rgba(6, 182, 212, 0.2) 0%, rgba(0, 0, 0, 0) 70%);
    opacity: 0; /* Start hidden, fade in via JS/GSAP */
}

/*--------------*
 * Login Screen *
 *--------------*/
#loginScreen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--surface-background);
    display: flex; /* Use flex by default */
    justify-content: center;
    align-items: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 1s var(--ease-in-out), visibility 1s var(--ease-in-out);
}

#loginScreen.visible {
    opacity: 1;
    visibility: visible;
}

.login-container {
    width: 100%;
    max-width: 380px;
    padding: var(--space-8);
    display: flex;
    flex-direction: column;
    align-items: center;
    background: var(--surface-white);
    border-radius: var(--radius-2xl);
    box-shadow: var(--shadow-lg);
    transform: translateY(0);
    transition: transform var(--duration-lg) var(--ease-out);
}

#loginScreen.hidden .login-container {
    transform: translateY(40px); /* Slide down when hiding */
}

.logo { /* Shared logo class */
    width: 120px;
    height: auto;
    margin-bottom: var(--space-8);
    transition: all var(--duration-lg) var(--ease-gentle);
    filter: drop-shadow(0 4px 12px rgba(0, 0, 0, 0.06));
}

.login-heading {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: var(--space-2);
    text-align: center;
    color: var(--text-primary);
    letter-spacing: -0.02em;
}

.login-subheading {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-bottom: var(--space-8);
    text-align: center;
}

.login-form {
    width: 100%;
}

.form-group {
    margin-bottom: var(--space-5);
}

.form-label {
    display: block;
    margin-bottom: var(--space-2);
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--text-secondary);
}

.form-input, .document-edit, .library-search-input, .search-input {
    width: 100%;
    padding: var(--space-3) var(--space-4);
    background-color: var(--gray-100);
    border: 1px solid var(--border-color);
    border-radius: var(--radius-lg);
    font-size: 0.9375rem;
    color: var(--text-primary);
    transition: all var(--duration-md) var(--ease-gentle);
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.02);
}

.form-input:focus, .document-edit:focus, .library-search-input:focus, .search-input:focus {
    outline: none;
    background-color: var(--gray-50);
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.02),
                0 0 0 2px var(--accent-light);
    border-color: var(--accent);
}

.error-message {
    color: var(--error);
    font-size: 0.75rem;
    margin-top: var(--space-2);
    display: none; /* Show via JS on error */
}

/*---------*
 * Buttons *
 *---------*/
.btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-2);
    padding: var(--space-3) var(--space-6);
    font-size: 0.9375rem;
    font-weight: 500;
    border-radius: var(--radius-xl);
    cursor: pointer;
    transition: all var(--duration-md) var(--ease-out);
    border: none;
    position: relative;
    overflow: hidden;
    user-select: none;
    box-shadow: 0 3px 12px rgba(0, 0, 0, 0.03), 0 1px 3px rgba(0, 0, 0, 0.01);
    backdrop-filter: blur(3px);
    -webkit-backdrop-filter: blur(3px);
}

/* Shine effect on hover */
.btn:before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.2),
        transparent
    );
    transition: left 0.7s var(--ease-gentle);
}

.btn:hover:before {
    left: 100%;
}

.btn-primary {
    background: var(--gradient-teal-dark);
    color: var(--text-on-accent);
    position: relative;
    z-index: 1;
}

.btn-primary:hover:not(:disabled) {
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 10px 20px -10px rgba(0, 0, 0, 0.2), 0 3px 6px -3px rgba(0, 0, 0, 0.1);
}

.btn-primary:active {
    transform: translateY(0px) scale(0.98);
    box-shadow: 0 5px 10px -5px rgba(0, 0, 0, 0.2), 0 1px 2px -1px rgba(0, 0, 0, 0.1);
}

/* Radial gradient effect */
.btn-primary:after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: inherit;
    opacity: 0;
    background: radial-gradient(circle at center, rgba(255,255,255,0.2), transparent 70%);
    transition: opacity 0.5s var(--ease-gentle);
    z-index: -1;
}

.btn-primary:hover:after {
    opacity: 1;
}

.btn-secondary {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.8), rgba(245, 245, 250, 0.6));
    color: var(--text-primary);
    backdrop-filter: blur(5px);
    -webkit-backdrop-filter: blur(5px);
    border: 1px solid var(--border-color);
}

.btn-secondary:hover:not(:disabled) {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(245, 245, 250, 0.7));
    transform: translateY(-2px) scale(1.02);
    box-shadow: 0 8px 15px -8px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.05);
    border-color: var(--gray-300);
    color: var(--text-primary);
}

.btn-secondary:active {
    transform: translateY(0px) scale(0.98);
}

.btn-full {
    width: 100%;
}

.btn-icon {
    margin-right: var(--space-2);
    font-size: 0.875em; /* Relative to button font size */
}

.btn-sm {
    padding: var(--space-2) var(--space-3);
    font-size: 0.8125rem;
}

/* Estado de desativado para botões */
.btn:disabled,
.toolbar-btn:disabled,
.recording-btn:disabled,
.library-btn:disabled,
.patient-tab:disabled,
.document-format-option:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    box-shadow: none;
    transform: none !important; /* Override hover transforms */
    background-image: none; /* Remove gradients */
    background-color: var(--gray-200); /* Flat background */
    color: var(--text-disabled);
}

.btn:disabled:hover,
.toolbar-btn:disabled:hover,
.recording-btn:disabled:hover,
.library-btn:disabled:hover,
.patient-tab:disabled:hover,
.document-format-option:disabled:hover {
    transform: none;
    box-shadow: none;
    background-color: var(--gray-200);
}

.btn:disabled:before, .btn:disabled:after {
    display: none; /* Hide pseudo-elements */
}

/*------------------*
 * Main App Layout  *
 *------------------*/
#appContainer {
    display: flex; /* Use flex by default after login/splash */
    flex-direction: column;
    min-height: 100vh;
    position: relative;
    overflow: hidden;
    /* Initially hidden, shown after login/splash via JS */
    /* display: none; */
}

/* App Header */
.app-header {
    background: rgba(255, 255, 255, 0.7);
    backdrop-filter: blur(var(--blur-md));
    -webkit-backdrop-filter: blur(var(--blur-md));
    position: relative; /* Changed from sticky for simplicity */
    z-index: 10;
    padding: var(--space-4) var(--space-6);
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: background var(--duration-lg) var(--ease-gentle);
    border-bottom: 1px solid var(--border-color-light);
    flex-shrink: 0;
}

/* Wavy bottom border */
.app-header::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 2px; /* Increased height for visibility */
    background: linear-gradient(90deg,
        transparent 0%,
        rgba(6, 182, 212, 0.2) 20%,
        rgba(6, 182, 212, 0.5) 50%,
        rgba(6, 182, 212, 0.2) 80%,
        transparent 100%);
    opacity: 0.5;
    clip-path: polygon(
        0% 0%, 5% 20%, 15% 10%, 25% 30%, 35% 0%, 45% 20%, 55% 5%, 65% 25%, 75% 10%, 85% 30%, 95% 5%, 100% 20%, 100% 100%, 0% 100%
    );
}

.app-logo {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    margin-right: auto; /* Push other items to the right */
}

.app-logo img {
    height: 28px;
    width: auto;
    transition: transform var(--duration-md) var(--ease-out);
}

.app-logo:hover img {
    transform: scale(1.05);
}

.app-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    letter-spacing: -0.03em;
}

.app-nav {
    display: flex;
    align-items: center;
    gap: var(--space-5);
}

.nav-item {
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.9375rem;
    font-weight: 450;
    transition: all var(--duration-md) var(--ease-gentle);
    position: relative;
    padding: var(--space-1) var(--space-1);
}

/* Underline animation */
.nav-item::after {
    content: '';
    position: absolute;
    bottom: -2px;
    left: 50%;
    width: 0;
    height: 2px;
    background: var(--accent);
    transform: translateX(-50%);
    transition: width var(--duration-md) var(--ease-gentle);
    border-radius: var(--radius-full);
    opacity: 0;
}

.nav-item:hover {
    color: var(--text-primary);
}

.nav-item:hover::after {
    width: 20px;
    opacity: 0.5;
}

.nav-item.active {
    color: var(--text-primary);
    font-weight: 500;
}

.nav-item.active::after {
    width: 24px;
    opacity: 1;
}

/* User Menu */
.user-menu {
    display: flex;
    align-items: center;
    gap: var(--space-2);
    cursor: pointer;
    position: relative;
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-lg);
    transition: all var(--duration-md) var(--ease-gentle);
    margin-left: var(--space-4);
}

.user-menu:hover {
    background: var(--gray-100);
}

.user-avatar {
    width: 36px;
    height: 36px;
    border-radius: var(--radius-full);
    background-color: var(--teal-900); /* Background cor do logo */
    color: var(--text-on-dark);
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    font-size: 14px;
    transition: transform var(--duration-md) var(--ease-out);
}

.user-menu:hover .user-avatar {
    transform: scale(1.05);
}

.user-dropdown {
    position: absolute;
    top: calc(100% + var(--space-3));
    right: 0;
    background-color: var(--surface-overlay);
    backdrop-filter: blur(var(--blur-md));
    -webkit-backdrop-filter: blur(var(--blur-md));
    border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    min-width: 200px;
    z-index: 100;
    display: none; /* Hidden by default, shown on hover */
    overflow: hidden;
    transform-origin: top right;
    animation: dropdownAppear var(--duration-md) var(--ease-out) forwards;
    padding: var(--space-2) 0;
}

@keyframes dropdownAppear {
    from {
        opacity: 0;
        transform: scale(0.95) translateY(-10px);
    }
    to {
        opacity: 1;
        transform: scale(1) translateY(0);
    }
}

.user-menu:hover .user-dropdown {
    display: block;
}

.user-dropdown-item {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    padding: var(--space-3) var(--space-4);
    color: var(--text-primary);
    text-decoration: none;
    font-size: 0.875rem;
    transition: all var(--duration-md) var(--ease-gentle);
}

.user-dropdown-item i {
    width: 16px; /* Align icons */
    text-align: center;
    color: var(--text-secondary);
}

.user-dropdown-item:hover {
    background-color: var(--gray-100);
}

.user-dropdown-item:hover i {
    color: var(--accent);
}

.user-dropdown-divider {
    height: 1px;
    background: linear-gradient(
        to right,
        transparent,
        var(--gray-300),
        transparent
    );
    margin: var(--space-1) 0;
    opacity: 0.6;
}

/* Main Layout */
.app-main {
    flex: 1;
    display: flex;
    /* Ensure it takes remaining height */
    height: calc(100vh - 73px); /* Adjust based on actual header height */
    overflow: hidden; /* Prevent double scrollbars */
}

/*----------*
 * Sidebar  *
 *----------*/
.app-sidebar {
    width: 60px; /* Collapsed width */
    background-color: var(--teal-950);
    display: flex;
    flex-direction: column;
    transition: all var(--duration-lg) var(--ease-in-out);
    overflow: hidden;
    z-index: 5;
    position: relative;
    height: 100%; /* Take full height of parent */
    flex-shrink: 0;
}

/* Right border */
.app-sidebar::after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 1px;
    background: linear-gradient(to bottom,
        transparent,
        rgba(6, 182, 212, 0.5),
        transparent);
    opacity: 0.4;
}

.app-sidebar.expanded {
    width: 220px; /* Expanded width */
}

.sidebar-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    height: 48px; /* Fixed height */
    cursor: pointer;
    color: var(--text-on-dark);
    transition: all var(--duration-md) var(--ease-gentle);
    flex-shrink: 0; /* Prevent shrinking */
}

.sidebar-toggle:hover {
    color: var(--teal-300);
    background-color: rgba(255, 255, 255, 0.05);
}

.sidebar-menu {
    display: flex;
    flex-direction: column;
    padding: var(--space-3) var(--space-2);
    flex: 1; /* Take remaining space */
    gap: var(--space-3);
    overflow-y: auto; /* Allow scrolling if needed */
    overflow-x: hidden;
}

.sidebar-link {
    display: flex;
    align-items: center;
    gap: var(--space-4);
    padding: var(--space-3) var(--space-3);
    color: var(--text-on-dark);
    text-decoration: none;
    transition: all var(--duration-md) var(--ease-gentle);
    white-space: nowrap; /* Prevent text wrapping */
    border-radius: var(--radius-lg);
    position: relative;
    overflow: hidden; /* Clip text when collapsed */
    opacity: 0.7;
}

/* Active indicator line */
.sidebar-link::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 3px;
    height: 100%;
    background: var(--teal-400);
    transform: scaleY(0);
    transition: transform var(--duration-md) var(--ease-gentle);
    opacity: 0;
}

.sidebar-link:hover {
    background-color: rgba(255, 255, 255, 0.05);
    color: var(--text-on-dark);
    opacity: 1;
}

.sidebar-link.active {
    background-color: rgba(6, 182, 212, 0.15);
    color: var(--teal-300);
    font-weight: 500;
    opacity: 1;
}

.sidebar-link.active::before {
    transform: scaleY(0.6);
    opacity: 1;
}

.sidebar-link i {
    width: 20px; /* Fixed width for icon alignment */
    font-size: 1.125rem;
    text-align: center;
    transition: transform var(--duration-md) var(--ease-out);
    flex-shrink: 0; /* Prevent icon shrinking */
}

.sidebar-link:hover i {
    transform: translateY(-1px);
}

.sidebar-link span {
    opacity: 0; /* Hidden when collapsed */
    transform: translateX(-10px);
    transition: all var(--duration-lg) var(--ease-in-out);
}

.app-sidebar.expanded .sidebar-link span {
    opacity: 1; /* Visible when expanded */
    transform: translateX(0);
}

.sidebar-link.disabled {
    opacity: 0.3;
    cursor: not-allowed;
    pointer-events: none;
}

.sidebar-link.disabled i {
    color: var(--text-on-dark);
}

/* Additional styles for collapsed sidebar hover tooltips */
.app-sidebar:not(.expanded) .sidebar-link span {
    opacity: 0;
    visibility: hidden;
    position: absolute; /* Prevent taking space */
    left: 100%;
    margin-left: var(--space-3);
    background-color: var(--teal-900);
    color: white;
    padding: var(--space-1) var(--space-2);
    border-radius: var(--radius-md);
    font-size: 0.75rem;
    white-space: nowrap;
    pointer-events: none;
    transition-delay: 0.1s; /* Delay hiding */
    z-index: 10;
}

.app-sidebar:not(.expanded) .sidebar-link:hover span {
    opacity: 1;
    visibility: visible;
    transition-delay: 0.3s; /* Delay showing tooltip */
}

/*----------------------------*
 * Workspace & View Container *
 *----------------------------*/
.workspace,
.app-workspace {
    flex: 1; /* Take remaining horizontal space */
    height: 100%; /* Take full height of parent */
    overflow-y: auto; /* Allow scrolling within the view */
    padding: var(--space-6); /* Add padding to content area */
    background-color: var(--surface-background);
    position: relative; /* For absolute positioned elements within */
    /* Hide inactive views */
    display: none;
}

.workspace.active {
    display: block; /* Show the active view */
    animation: fadeInWorkspace 0.5s var(--ease-out) forwards;
}

@keyframes fadeInWorkspace {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Specific view styles (if needed, otherwise rely on workspace padding) */
.dashboard {
    /* Dashboard specific styles if any */
}

#agenda-view {
    /* Agenda specific styles */
}

#patients-view {
    /* Patients list specific styles */
}

#library-view {
    display: flex; /* Special layout for library */
    padding: 0; /* Remove workspace padding */
    gap: var(--space-6);
}

#library-view.active {
    display: flex;
}


#new-view, #processing-view, #results-view {
    /* Styles for these single-column views */
}

#patient-view {
    /* Patient panel specific styles */
    padding: 0; /* Remove workspace padding */
}

/*-------------*
 * Dashboard   *
 *-------------*/
.dashboard-header {
    margin-bottom: var(--space-8);
}

.dashboard-title {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: var(--space-2);
    letter-spacing: -0.02em;
    color: var(--text-primary);
}

.dashboard-subtitle {
    color: var(--text-secondary);
    font-size: 1rem;
}

.welcome-message {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.2));
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    border-radius: var(--radius-2xl);
    padding: var(--space-6);
    margin-bottom: var(--space-8);
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    overflow: hidden;
    box-shadow: 0 5px 25px rgba(0, 0, 0, 0.03);
    transition: all var(--duration-lg) cubic-bezier(0.34, 1.56, 0.64, 1);
}

.welcome-message:hover {
    transform: translateY(-3px) scale(1.01);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.05), 0 5px 15px rgba(0, 0, 0, 0.02);
}

/* Shine effect */
.welcome-message::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(120deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: translateX(-100%);
    transition: transform 0.8s var(--ease-gentle);
}

.welcome-message:hover::before {
    transform: translateX(100%);
}

/* Wavy bottom line */
.welcome-message::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 10%;
    right: 10%;
    height: 2px;
    background: linear-gradient(90deg,
        transparent,
        rgba(6, 182, 212, 0.3),
        transparent);
    opacity: 0.4;
    clip-path: polygon(
        0% 100%, 5% 0%, 10% 100%, 15% 40%, 25% 100%, 40% 0%, 50% 100%, 60% 30%, 70% 100%, 80% 0%, 90% 100%, 95% 30%, 100% 100%
    );
}

.welcome-text h2 {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: var(--space-2);
    letter-spacing: -0.01em;
    color: var(--text-primary);
}

.welcome-text p {
    color: var(--text-secondary);
    font-size: 0.9375rem;
    margin-bottom: var(--space-4);
}

/* Estilos para a nova seção de seleção de pacientes */
.patient-selection-section {
    margin-bottom: var(--space-8);
}

.dashboard-search .search-bar { /* Estilo específico para busca no dashboard */
    max-width: 500px; /* Limitar largura da busca */
    margin-bottom: var(--space-4);
}

.patient-card-list {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: var(--space-4);
}

.dashboard-patient-card { /* Pode herdar de .patient-card ou ter estilos próprios */
    background: var(--surface-white);
    border: 1px solid var(--border-color);
    padding: var(--space-4);
    border-radius: var(--radius-xl);
    transition: all var(--duration-md) var(--ease-gentle);
    display: flex;
    flex-direction: column;
    justify-content: space-between; /* Para alinhar botão */
}
.dashboard-patient-card:hover {
    box-shadow: var(--shadow-md);
    border-color: var(--teal-200);
    transform: translateY(-2px);
}
.dashboard-patient-card .patient-card-header { margin-bottom: var(--space-2); }
.dashboard-patient-card .patient-card-info { margin-bottom: var(--space-3); font-size: 0.8125rem;}
.dashboard-patient-card .access-patient-btn { margin-top: auto; } /* Empurra botão para baixo */

/* Stat Cards */
.stat-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(240px, 1fr));
    gap: var(--space-5);
    margin-bottom: var(--space-8);
}

.stat-card {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.3));
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    border-radius: var(--radius-2xl);
    padding: var(--space-5);
    transition: all var(--duration-lg) cubic-bezier(0.34, 1.56, 0.64, 1);
    position: relative;
    overflow: hidden;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.02);
}

.stat-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(120deg, transparent, rgba(255, 255, 255, 0.1), transparent);
    transform: translateX(-100%);
    transition: transform 0.6s var(--ease-gentle);
}

.stat-card::after {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle at bottom right,
                    rgba(255, 255, 255, 0.3),
                    transparent 70%);
    opacity: 0;
    transition: opacity 0.8s var(--ease-gentle);
}

.stat-card:hover::before {
    transform: translateX(100%);
}

.stat-card:hover::after {
    opacity: 1;
}

.stat-card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.06), 0 5px 15px rgba(0, 0, 0, 0.03);
}

.stat-card-title {
    font-size: 0.875rem;
    color: var(--text-secondary);
    margin-bottom: var(--space-3);
    display: flex;
    align-items: center;
    gap: var(--space-2);
}

.stat-card-value {
    font-size: 1.75rem;
    font-weight: 600;
    color: var(--text-primary);
    letter-spacing: -0.02em;
}

/* Section Header */
.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--space-4);
    padding-bottom: var(--space-2);
    border-bottom: 1px solid var(--border-color-light);
}

.section-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    letter-spacing: -0.01em;
}

.section-header .nav-item {
    font-size: 0.875rem;
    color: var(--accent);
    text-decoration: none;
}

.section-header .nav-item:hover {
    text-decoration: underline;
}

/* Recent Items (Documents/Patients) */
.recent-items, .recent-patients { /* Combined styles */
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: var(--space-4);
}

.recent-item, .patient-card { /* Combined styles */
    display: flex;
    align-items: center;
    gap: var(--space-4);
    padding: var(--space-4);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.2));
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    border-radius: var(--radius-xl);
    transition: all var(--duration-lg) cubic-bezier(0.34, 1.56, 0.64, 1);
    cursor: pointer;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.02);
    position: relative;
    overflow: hidden;
}

/* Shine effect */
.recent-item::before, .patient-card::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(120deg, transparent, rgba(255, 255, 255, 0.15), transparent);
    transform: translateX(-100%);
    transition: transform 0.6s var(--ease-gentle);
}

/* Accent line effect */
.recent-item::after, .patient-card::after {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(to bottom, transparent, var(--accent-light), transparent);
    opacity: 0;
    transition: opacity 0.4s var(--ease-gentle), transform 0.6s var(--ease-out);
    transform: scaleY(0.5);
}

.recent-item:hover::before, .patient-card:hover::before {
    transform: translateX(100%);
}

.recent-item:hover::after, .patient-card:hover::after {
    opacity: 1;
    transform: scaleY(0.8);
}

.recent-item:hover, .patient-card:hover {
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 15px 30px rgba(0, 0, 0, 0.05), 0 5px 15px rgba(0, 0, 0, 0.025);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.4));
}

.recent-item:active, .patient-card:active {
    transform: translateY(-1px) scale(0.99);
    transition-duration: 0.2s;
}

.recent-item-icon { /* Icon for recent documents */
    width: 48px;
    height: 48px;
    border-radius: var(--radius-lg);
    background-color: var(--teal-50);
    color: var(--teal-500);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    transition: all var(--duration-md) var(--ease-elastic);
    flex-shrink: 0;
}

.patient-avatar { /* Avatar for recent patients */
    width: 48px; /* Match icon size */
    height: 48px;
    border-radius: 50%;
    background-color: var(--teal-900); /* Match user-avatar */
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 500;
    color: var(--text-on-dark);
    transition: all var(--duration-md) var(--ease-elastic);
    flex-shrink: 0;
}


.recent-item:hover .recent-item-icon,
.patient-card:hover .patient-avatar {
    transform: scale(1.1);
}

.recent-item-info { /* Info for recent documents */
    flex: 1;
    min-width: 0;
}

.patient-card-details { /* Info for recent patients */
    flex: 1;
    min-width: 0;
}

.recent-item-title, .patient-card-name { /* Combined title styles */
    font-weight: 500;
    margin-bottom: var(--space-1);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    color: var(--text-primary);
    letter-spacing: -0.01em;
}
.patient-card-name { font-weight: 600; } /* Slightly bolder for names */

.recent-item-meta { /* Meta for recent documents */
    display: flex;
    align-items: center;
    gap: var(--space-2);
    font-size: 0.75rem;
    color: var(--text-secondary);
}

.patient-card-info { /* Meta for recent patients */
    font-size: 0.75rem;
    color: var(--text-secondary);
    margin-bottom: var(--space-2);
}

.patient-card-last-visit { /* Specific meta for patients */
    font-size: 0.75rem;
    color: var(--text-tertiary);
    display: flex;
    align-items: center;
    gap: var(--space-1);
}

.recent-item-meta-divider { /* Divider for document meta */
    width: 3px;
    height: 3px;
    border-radius: 50%;
    background-color: var(--gray-400);
}


/*----------------------------*
 * Document Library/Workspace *
 *----------------------------*/
/* #library-view specific styles */
.document-library {
    width: 320px;
    background: rgba(250, 250, 252, 0.4);
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    display: flex;
    flex-direction: column;
    transition: all var(--duration-lg) var(--ease-in-out);
    z-index: 3;
    position: relative;
    height: 100%; /* Fill height within #library-view */
    flex-shrink: 0; /* Prevent shrinking */
    overflow-y: hidden; /* Prevent scroll duplo */
    border-right: 1px solid var(--border-color);
}

/* Right border */
.document-library::after {
    content: "";
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    width: 1px;
    background: linear-gradient(to bottom, transparent, var(--teal-300), transparent);
    opacity: 0.4;
}

.library-header {
    padding: var(--space-4);
    flex-shrink: 0; /* Prevent shrinking */
    border-bottom: 1px solid var(--border-color);
}

.library-title {
    font-size: 1rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.03em;
    color: var(--text-secondary);
    margin-bottom: var(--space-4);
}

.library-actions {
    display: flex;
    gap: var(--space-2);
    margin-bottom: var(--space-3); /* Added margin */
}

.library-btn {
    padding: var(--space-2);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.2));
    border-radius: var(--radius-xl);
    font-size: 0.75rem;
    display: flex;
    align-items: center;
    gap: var(--space-2);
    cursor: pointer;
    flex: 1;
    justify-content: center;
    transition: all var(--duration-md) cubic-bezier(0.34, 1.56, 0.64, 1);
    color: var(--text-primary);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.01);
    position: relative;
    overflow: hidden;
    border: none; /* Ensure no default border */
}

/* Radial shine effect */
.library-btn:before {
    content: '';
    position: absolute;
    top: -90%;
    left: -90%;
    width: 150%;
    height: 150%;
    background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
    opacity: 0;
    transition: opacity 0.5s var(--ease-gentle);
}

.library-btn:hover {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.4));
    transform: translateY(-2px) scale(1.03);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.04);
}

.library-btn:hover:before {
    opacity: 1;
    animation: shineEffect 1.5s infinite alternate var(--ease-gentle);
}

@keyframes shineEffect {
    0% { transform: translate(-10%, -10%) scale(1); }
    100% { transform: translate(-5%, -5%) scale(1.1); }
}

.library-btn:active {
    transform: translateY(0) scale(0.97);
}

.library-btn i {
    font-size: 0.875rem;
}

.library-search {
    position: relative;
    margin-top: var(--space-3);
    margin-bottom: var(--space-3);
}

.library-search-input {
    width: 100%;
    padding: var(--space-2) var(--space-4) var(--space-2) var(--space-8);
    background-color: rgba(255, 255, 255, 0.6);
    border: none;
    border-radius: var(--radius-lg);
    font-size: 0.8125rem;
    color: var(--text-primary);
    transition: all var(--duration-md) var(--ease-gentle);
    box-shadow: var(--shadow-sm);
}

.library-search-input:focus {
    outline: none;
    background-color: rgba(255, 255, 255, 0.9);
    box-shadow: var(--shadow-md);
}

.library-search-icon {
    position: absolute;
    left: var(--space-3);
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-tertiary);
    font-size: 0.75rem;
    pointer-events: none;
}

.library-filters {
    display: flex;
    flex-wrap: wrap;
    gap: var(--space-2);
    margin-bottom: var(--space-3);
    overflow-x: auto;
    padding-bottom: var(--space-1);
    -ms-overflow-style: none;
    scrollbar-width: none;
}

.library-filters::-webkit-scrollbar {
    display: none;
}

.library-filter {
    padding: var(--space-1) var(--space-3);
    background: var(--gray-100);
    border: none;
    font-size: 0.75rem;
    color: var(--text-secondary);
    border-radius: var(--radius-full);
    cursor: pointer;
    white-space: nowrap;
    transition: all var(--duration-md) var(--ease-gentle);
}

.library-filter:hover {
    background-color: var(--gray-200);
    color: var(--text-primary);
}

.library-filter.active {
    background-color: var(--teal-500);
    color: white;
    font-weight: 500;
}

.library-content {
    flex: 1; /* Take remaining vertical space */
    overflow-y: auto;
    padding: var(--space-4); /* Add bottom padding */
}

.library-section {
    margin-bottom: var(--space-4);
}

.library-section-header {
    padding: 0 var(--space-2);
    margin-bottom: var(--space-2);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.library-section-title {
    font-size: 0.6875rem;
    font-weight: 600;
    color: var(--text-tertiary);
    text-transform: uppercase;
    letter-spacing: 0.03em;
}

.library-section-action {
    font-size: 0.75rem;
    color: var(--accent);
    background: none;
    border: none;
    cursor: pointer;
    transition: color var(--duration-md) var(--ease-gentle);
}

.library-section-action:hover {
    color: var(--accent-vivid);
}

.document-item {
    display: flex;
    align-items: center;
    padding: var(--space-3);
    cursor: pointer;
    transition: all var(--duration-md) cubic-bezier(0.2, 0.85, 0.3, 1);
    border-radius: var(--radius-lg);
    margin-bottom: var(--space-2);
    position: relative;
    overflow: hidden;
    border: 1px solid transparent;
}

/* Active indicator line */
.document-item::before {
    content: '';
    position: absolute;
    left: 0;
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    background: linear-gradient(to bottom, var(--teal-300), var(--teal-500));
    border-radius: 0 var(--radius-full) var(--radius-full) 0;
    transition: all var(--duration-md) var(--ease-out);
    opacity: 0;
    box-shadow: 0 0 10px rgba(6, 182, 212, 0.3);
}

.document-item:hover {
    background-color: var(--gray-50);
    transform: translateX(3px);
}

.document-item:hover::before {
    width: 2px;
    height: 60%;
    opacity: 0.6;
}

.document-item.active {
    background-color: var(--accent-subtle);
    border-color: var(--accent-light);
}

.document-item.active::before {
    width: 3px;
    height: 80%;
    opacity: 1;
}

.document-icon {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: var(--space-3);
    border-radius: var(--radius-md);
    background-color: var(--gray-100);
    font-size: 1rem;
    transition: transform var(--duration-md) var(--ease-out);
    flex-shrink: 0; /* Prevent shrinking */
}

.document-item:hover .document-icon {
    transform: scale(1.1);
}

/* Color coding icons based on type */
.document-audio .document-icon { background-color: #fbcfe8; color: #be185d; } /* Rosa */
.document-transcription .document-icon { background-color: #dbeafe; color: #2563eb; } /* Azul */
.document-vintra .document-icon { background-color: #ccfbf1; color: #0f766e; } /* Ciano */
.document-soap .document-icon { background-color: #dcfce7; color: #16a34a; } /* Verde */
.document-narrative .document-icon { background-color: #fef3c7; color: #b45309; } /* Amarelo */
.document-ipissima .document-icon { background-color: #fae8ff; color: #a21caf; } /* Roxo */
.document-orientacoes .document-icon { background-color: #e0e7ff; color: #4f46e5; } /* Índigo */

.document-info {
    flex: 1;
    min-width: 0; /* Prevent overflow issues */
}

.document-title {
    font-size: 0.875rem;
    font-weight: 500;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    margin-bottom: var(--space-1);
    color: var(--text-primary);
    letter-spacing: -0.01em;
}

.document-meta {
    font-size: 0.6875rem;
    color: var(--text-tertiary);
}

.document-actions {
    opacity: 0;
    transition: opacity var(--duration-md) var(--ease-gentle);
    display: flex; /* Ensure actions are inline */
    gap: var(--space-1);
    margin-left: var(--space-3);
}

.document-item:hover .document-actions,
.document-item.active .document-actions {
    opacity: 1;
}

.document-action-btn {
    width: 28px;
    height: 28px;
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: var(--radius-full);
    transition: all var(--duration-md) var(--ease-gentle);
}

.document-action-btn:hover {
    background-color: var(--gray-200);
    color: var(--text-primary);
}

/* Document Workspace (Right Panel in Library View) */
.document-workspace {
    flex: 1; /* Take remaining space */
    display: flex;
    flex-direction: column;
    background-color: var(--surface-white);
    transition: all var(--duration-lg) var(--ease-in-out);
    height: 100%; /* Fill height */
    overflow: hidden; /* Prevent double scroll */
    border-radius: var(--radius-xl);
    box-shadow: var(--shadow-sm);
}

/* Focus Mode Styles */
.focus-mode-btn {
    position: absolute; /* Position relative to nearest positioned ancestor */
    top: var(--space-4);
    right: var(--space-4);
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: rgba(255, 255, 255, 0.8);
    border: none; /* Ensure no border */
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    z-index: 50;
    transition: all var(--duration-md) var(--ease-out);
    color: var(--text-secondary);
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    box-shadow: var(--shadow-sm);
}

.focus-mode-btn:hover {
    background-color: rgba(255, 255, 255, 0.95);
    transform: scale(1.1);
    color: var(--accent);
    box-shadow: var(--shadow-md);
}

/* Hide elements in focus mode */
.focus-mode .app-sidebar,
.focus-mode .document-library,
.focus-mode .app-header {
    opacity: 0;
    transform: translateX(-20px);
    pointer-events: none;
    transition: all var(--duration-lg) var(--ease-in-out);
}

/* Expand workspace in focus mode */
.focus-mode .document-workspace {
    position: absolute; /* Take over screen */
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 40;
    background-color: var(--surface-background);
    transition: all var(--duration-lg) var(--ease-in-out);
}

/* Fade toolbar slightly in focus mode */
.focus-mode .document-toolbar {
    opacity: 0.1;
    transition: opacity var(--duration-md) var(--ease-gentle);
}

.focus-mode .document-toolbar:hover {
    opacity: 1; /* Show on hover */
}

/* Adjust padding in focus mode */
.focus-mode .document-content {
    padding: var(--space-8);
}

/* Center and shadow document container in focus mode */
.focus-mode .document-container {
    max-width: 900px;
    margin: 0 auto;
    box-shadow: var(--shadow-md);
    transition: all var(--duration-lg) var(--ease-gentle);
}

/* Empty State in Document View */
.document-empty {
    flex: 1; /* Take available space */
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: var(--space-8);
    text-align: center;
    color: var(--text-secondary);
    height: 100%; /* Ensure it fills parent */
}

.document-empty-icon {
    font-size: 4rem;
    margin-bottom: var(--space-6);
    opacity: 0.2;
    color: var(--text-tertiary);
}

.document-empty-title {
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: var(--space-2);
    color: var(--text-primary);
    letter-spacing: -0.01em;
}

.document-empty-text {
    font-size: 0.9375rem;
    max-width: 400px;
    margin-bottom: var(--space-5);
    color: var(--text-secondary);
}

/* Document Toolbar */
.document-toolbar {
    display: flex;
    flex-wrap: wrap; /* Allow wrapping */
    justify-content: space-between;
    align-items: center;
    padding: var(--space-3) var(--space-5);
    background: var(--gray-50);
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    transition: all var(--duration-md) var(--ease-gentle);
    position: relative; /* For pseudo-element */
    z-index: 2;
    flex-shrink: 0; /* Prevent shrinking */
    border-bottom: 1px solid var(--border-color);
    border-radius: var(--radius-xl) var(--radius-xl) 0 0;
}

/* Wavy bottom border */
.document-toolbar::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: var(--space-5);
    right: var(--space-5);
    height: 2px;
    background: linear-gradient(90deg,
        transparent 0%,
        rgba(6, 182, 212, 0.2) 20%,
        rgba(6, 182, 212, 0.4) 50%,
        rgba(6, 182, 212, 0.2) 80%,
        transparent 100%);
    opacity: 0.3;
    clip-path: polygon(
        0% 0%, 7% 30%, 13% 0%, 23% 40%, 33% 10%, 43% 50%, 53% 0%, 63% 35%, 73% 5%, 83% 45%, 93% 15%, 100% 30%, 100% 100%, 0% 100%
    );
}

.document-info-header {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    min-width: 0; /* Prevent overflow */
    flex: 1; /* Allow shrinking/growing */
    margin-right: var(--space-4); /* Space before actions */
}

.document-info-icon {
    width: 36px;
    height: 36px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.125rem;
    color: var(--text-secondary);
    transition: transform var(--duration-md) var(--ease-out);
    flex-shrink: 0;
    border-radius: var(--radius-md);
}

.document-toolbar:hover .document-info-icon {
    transform: scale(1.1);
}

/* Color coding icons based on type */
.document-audio .document-info-icon { background-color: #fbcfe8; color: #be185d; } /* Rosa */
.document-transcription .document-info-icon { background-color: #dbeafe; color: #2563eb; } /* Azul */
.document-vintra .document-info-icon { background-color: #ccfbf1; color: #0f766e; } /* Ciano */
.document-soap .document-info-icon { background-color: #dcfce7; color: #16a34a; } /* Verde */
.document-narrative .document-info-icon { background-color: #fef3c7; color: #b45309; } /* Amarelo */
.document-ipissima .document-info-icon { background-color: #fae8ff; color: #a21caf; } /* Roxo */
.document-orientacoes .document-info-icon { background-color: #e0e7ff; color: #4f46e5; } /* Índigo */
/* Add icons for new/processing views */
#new-view .document-info-icon { background-color: #dbeafe; color: #2563eb; } /* Azul */
#processing-view .document-info-icon { background-color: #fef3c7; color: #b45309; } /* Amarelo */
#results-view .document-info-icon { background-color: #dcfce7; color: #16a34a; } /* Verde */


.document-info-details {
    min-width: 0; /* Prevent overflow */
}

.document-info-details h2 {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: var(--space-1);
    color: var(--text-primary);
    letter-spacing: -0.01em;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.document-info-meta {
    font-size: 0.8125rem;
    color: var(--text-tertiary);
    display: flex;
    align-items: center;
    gap: var(--space-2);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.document-info-meta-divider {
    display: inline-block;
    width: 1px;
    height: 10px;
    background-color: var(--gray-400);
    flex-shrink: 0;
}

.document-toolbar-actions {
    display: flex;
    gap: var(--space-2);
    flex-shrink: 0; /* Prevent shrinking */
}

.toolbar-btn {
    padding: var(--space-2) var(--space-3);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.5), rgba(255, 255, 255, 0.3));
    border: none;
    border-radius: var(--radius-xl);
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: var(--space-2);
    cursor: pointer;
    transition: all var(--duration-md) cubic-bezier(0.34, 1.56, 0.64, 1);
    color: var(--text-primary);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.02);
    backdrop-filter: blur(3px);
    -webkit-backdrop-filter: blur(3px);
    overflow: hidden;
    position: relative;
}

/* Shine effect */
.toolbar-btn:before {
    content: '';
    position: absolute;
    left: -100%;
    top: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s var(--ease-out);
}

.toolbar-btn:hover {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.7), rgba(255, 255, 255, 0.5));
    transform: translateY(-2px) scale(1.03);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
}

.toolbar-btn:hover:before {
    left: 100%;
}

.toolbar-btn:active {
    transform: translateY(0) scale(0.98);
}

.toolbar-btn.primary {
    background-color: var(--teal-500);
    background-image: var(--gradient-teal);
    color: white;
}

.toolbar-btn.primary:hover {
    background-color: var(--teal-600);
    background-image: var(--gradient-teal-dark);
}

.toolbar-btn i {
    font-size: 0.875em; /* Relative size */
}

/* Document Content Area */
.document-content {
    flex: 1; /* Take remaining vertical space */
    overflow: auto; /* Scroll within content area */
    background-color: var(--surface-background);
    padding: var(--space-5);
    transition: all var(--duration-md) var(--ease-gentle);
    position: relative;
}

.document-container {
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.85));
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    border-radius: var(--radius-xl);
    max-width: 800px; /* Max width for readability */
    margin: 0 auto; /* Center the container */
    box-shadow: var(--shadow-sm);
    min-height: 100%; /* Ensure it fills height */
    transition: all var(--duration-lg) var(--ease-gentle);
    overflow: hidden; /* Clip content */
    padding: var(--space-6);
}

.document-container:hover {
    box-shadow: var(--shadow-md);
}

.document-view { /* For displaying formatted text */
    white-space: pre-wrap; /* Preserve whitespace and line breaks */
    line-height: 1.7;
    font-size: 0.9375rem;
    color: var(--text-primary);
    font-family: 'Menlo', 'Consolas', monospace; /* Fonte monoespaçada para <pre> */
}

.document-view pre {
    white-space: pre-wrap; /* Quebra linha no <pre> */
    word-wrap: break-word;
}

.document-edit { /* For textarea editing */
    width: 100%;
    height: 100%; /* Fill container */
    min-height: 500px; /* Minimum editing height */
    padding: var(--space-8);
    border: none;
    resize: none;
    font-family: var(--font-body);
    font-size: 0.9375rem;
    line-height: 1.6;
    background: transparent;
    color: var(--text-primary);
}

.document-edit:focus {
    outline: none;
}

/* Document Footer (Example, not in merged HTML) */
.document-footer {
    padding: var(--space-4) var(--space-5);
    background: rgba(255, 255, 255, 0.6);
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    z-index: 2;
    flex-shrink: 0; /* Prevent shrinking */
}

/* Wavy top border */
.document-footer::before {
    content: "";
    position: absolute;
    top: 0;
    left: var(--space-5);
    right: var(--space-5);
    height: 2px;
    background: linear-gradient(90deg,
        transparent 0%,
        rgba(6, 182, 212, 0.2) 20%,
        rgba(6, 182, 212, 0.4) 50%,
        rgba(6, 182, 212, 0.2) 80%,
        transparent 100%);
    opacity: 0.3;
    clip-path: polygon(
        0% 100%, 7% 70%, 13% 100%, 23% 60%, 33% 90%, 43% 50%, 53% 100%, 63% 65%, 73% 95%, 83% 55%, 93% 85%, 100% 70%, 100% 0%, 0% 0%
    );
}

.document-status {
    font-size: 0.75rem;
    color: var(--text-tertiary);
    display: flex;
    align-items: center;
    gap: var(--space-1);
}

.document-status.saving {
    color: var(--warning);
    animation: saving-pulse 1.5s infinite;
}

.document-status.saved {
    color: var(--success);
}

.document-footer-actions {
    display: flex;
    gap: var(--space-3);
    align-items: center;
}

.processing-options {
    display: flex;
    gap: var(--space-3);
    font-size: 0.75rem;
}

.processing-options .option {
    display: flex;
    align-items: center;
    gap: var(--space-1);
}

/*-------------------*
 * Recording Module  *
 *-------------------*/
.recording-module { /* Used in #new-view */
    padding: var(--space-8);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.7));
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    border-radius: var(--radius-xl);
    transition: all var(--duration-lg) var(--ease-gentle);
    box-shadow: var(--shadow-lg);
    max-width: 700px; /* Limit width */
    margin: 0 auto; /* Center */
}

.recording-module:hover {
    box-shadow: var(--shadow-xl);
}

.recording-header {
    text-align: center;
    margin-bottom: var(--space-6);
}

.recording-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: var(--space-2);
    color: var(--text-primary);
    letter-spacing: -0.01em;
}

.recording-subtitle {
    font-size: 0.9375rem;
    color: var(--text-secondary);
}

.recording-controls {
    display: flex;
    justify-content: center;
    gap: var(--space-4);
    margin-bottom: var(--space-6);
}

.recording-btn {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all var(--duration-md) var(--ease-out);
    border: none;
    font-size: 1.5rem;
    box-shadow: var(--shadow-md);
}

.recording-btn:hover {
    transform: scale(1.05);
    box-shadow: var(--shadow-lg);
}

.recording-btn-start {
    background-color: var(--error);
    color: white;
}

.recording-btn-start:hover {
    background-color: var(--error-vivid);
}

.recording-btn-stop {
    background-color: var(--teal-700);
    color: white;
}

.recording-btn-stop:hover {
    background-color: var(--teal-600);
}

.recording-btn-pause {
    background-color: var(--warning);
    color: white;
}

.recording-btn-pause:hover {
    background-color: var(--warning-vivid);
}

.recording-timer {
    text-align: center;
    margin-bottom: var(--space-6);
}

.recording-time {
    font-size: 2.5rem;
    font-weight: 300;
    font-family: monospace; /* Monospace for timer */
    margin-bottom: var(--space-2);
    color: var(--text-primary);
    letter-spacing: 0.05em;
}

.recording-status {
    font-size: 0.875rem;
    color: var(--text-secondary);
}

.recording-visualizer {
    height: 60px;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.2));
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    border-radius: var(--radius-lg);
    margin-bottom: var(--space-6);
    overflow: hidden;
    position: relative;
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.05);
    display: flex;
    align-items: flex-end;
    justify-content: center;
    gap: 2px;
    opacity: 0.3;
    transition: opacity var(--duration-md) var(--ease-out);
}

.visualizer-bar {
    width: 4px;
    background: linear-gradient(to top, var(--teal-500), rgba(6, 182, 212, 0.3));
    border-radius: var(--radius-full);
    transition: height 0.1s linear; /* Smooth height changes */
}

.diarization-option {
    margin-top: var(--space-4);
    margin-bottom: var(--space-6);
    display: flex;
    align-items: center;
    gap: var(--space-2);
    justify-content: center; /* Center the option */
}

.diarization-checkbox {
    width: 16px;
    height: 16px;
    accent-color: var(--teal-500); /* Style checkbox color */
    cursor: pointer;
}

.diarization-label {
    font-size: 0.875rem;
    color: var(--text-secondary);
    cursor: pointer;
}

/*-----------------*
 * Upload Module   *
 *-----------------*/
.upload-module { /* Used in #new-view */
    padding: var(--space-8);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(255, 255, 255, 0.7));
    backdrop-filter: blur(var(--blur-sm));
    -webkit-backdrop-filter: blur(var(--blur-sm));
    border-radius: var(--radius-xl);
    transition: all var(--duration-lg) var(--ease-gentle);
    box-shadow: var(--shadow-lg);
    max-width: 700px; /* Limit width */
    margin: 0 auto; /* Center */
}

.upload-module:hover {
    box-shadow: var(--shadow-xl);
}

.upload-header {
    text-align: center;
    margin-bottom: var(--space-6);
}

.upload-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: var(--space-2);
    color: var(--text-primary);
    letter-spacing: -0.01em;
}

.upload-subtitle {
    font-size: 0.9375rem;
    color: var(--text-secondary);
}

.upload-area {
    border: 2px dashed var(--gray-300);
    border-radius: var(--radius-xl);
    padding: var(--space-10) var(--space-6);
    text-align: center;
    cursor: pointer;
    transition: all var(--duration-md) var(--ease-out);
    margin-bottom: var(--space-6);
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.2));
}

.upload-area:hover, .upload-area.dragover {
    border-color: var(--teal-400);
    background-color: var(--teal-50);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
}

.upload-icon {
    font-size: 2.5rem;
    color: var(--teal-400);
    margin-bottom: var(--space-4);
    transition: transform var(--duration-md) var(--ease-elastic);
}

.upload-area:hover .upload-icon {
    transform: translateY(-5px);
}

.upload-message {
    font-weight: 500;
    margin-bottom: var(--space-2);
    color: var(--text-primary);
    letter-spacing: -0.01em;
}

.upload-hint {
    font-size: 0.8125rem;
    color: var(--text-tertiary);
    /* margin-bottom: var(--space-4); Removed margin */
}

.upload-input {
    display: none; /* Hide actual file input */
}

.upload-preview {
    padding: var(--space-3);
    background-color: var(--gray-50);
    border-radius: var(--radius-lg);
    display: flex; /* Use flex by default, controlled by JS */
    align-items: center;
    margin-top: var(--space-4);
    /* display: none; */ /* Initially hidden, controlled by JS */
    border: 1px solid var(--border-color);
}

.upload-preview.visible {
    display: flex; /* Show when file is selected */
}

.upload-preview-icon {
    font-size: 1.5rem;
    color: var(--teal-500);
    margin-right: var(--space-3);
    flex-shrink: 0;
}

.upload-preview-info {
    flex: 1;
    min-width: 0; /* Prevent overflow */
}

.upload-preview-name {
    font-size: 0.875rem;
    font-weight: 500;
    margin-bottom: var(--space-1);
    color: var(--text-primary);
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.upload-preview-meta {
    font-size: 0.75rem;
    color: var(--text-tertiary);
}

.upload-preview-remove {
    background: none;
    border: none;
    color: var(--error);
    cursor: pointer;
    font-size: 1rem;
    transition: transform var(--duration-md) var(--ease-out);
    padding: var(--space-1); /* Add padding for easier clicking */
    margin-left: var(--space-2); /* Space from info */
    flex-shrink: 0;
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
}

.upload-preview-remove:hover {
    transform: scale(1.1);
    background-color: var(--gray-ording(); // Reseta se algo deu errado
    }
}


/** Reseta o estado da gravação e a UI */
function resetRecording(): void {
    console.log("Resetando gravação.");
    if (state.isRecording) {
        // Tenta parar o MediaRecorder se estiver ativo, mas evita chamar stopRecording() recursivamente
        if (state.mediaRecorder && state.mediaRecorder.state === 'recording') {
             try {
                 state.mediaRecorder.stop();
             } catch (e) {
                 console.error("Erro ao tentar parar mediaRecorder no reset:", e);
             }
        }
        state.isRecording = false; // Força o estado
    }
    stopTimer();
    stopVisualizer();
    resetRecordingVisuals();
    state.audioChunks = [];
    state.processedAudioBlob = null;
    state.recordingStartTime = null;
    // Garante que o stream seja parado
    if (state.visualizerSource?.mediaStream) {
       state.visualizerSource.mediaStream.getTracks().forEach(track => track.stop());
    }
    state.visualizerSource?.disconnect(); // Desconecta a fonte do analyser
    state.visualizerSource = null;
    state.mediaRecorder = null; // Limpa a referência
}

/** Reseta apenas os elementos visuais da gravação */
function resetRecordingVisuals(): void {
    document.getElementById('startRecordingBtn')?.classList.remove('hidden');
    document.getElementById('stopRecordingBtn')?.classList.add('hidden');
    document.getElementById('recordingPreview')?.style.display = 'none';
    document.getElementById('processRecordingBtn')?.style.display = 'none';
    document.getElementById('recordingProgress')?.style.display = 'none';
    document.getElementById('recordingTranscriptionSteps')?.style.display = 'none';
    document.getElementById('liveTranscriptionPreview')?.style.display = 'none';
    document.getElementById('recordingCompletedPanel')?.style.display = 'none';

    const timeEl = document.getElementById('recordingTime');
    if(timeEl) timeEl.textContent = '00:00:00';
    const statusEl = document.getElementById('recordingStatus');
    if(statusEl) statusEl.textContent = 'Pronto para gravar';

    const visualizer = document.querySelector<HTMLElement>('.recording-visualizer');
    if(visualizer) visualizer.style.opacity = '0.3';
    const barsContainer = document.getElementById('visualizerBars');
    if (barsContainer) barsContainer.innerHTML = ''; // Limpa barras
}


/** Atualiza a visibilidade dos botões de gravação */
function updateUIRecordingState(isRecording: boolean): void {
    document.getElementById('startRecordingBtn')?.classList.toggle('hidden', isRecording);
    document.getElementById('stopRecordingBtn')?.classList.toggle('hidden', !isRecording);
}

/** Inicia o timer da gravação */
function startTimer(): void {
    if (state.recordingInterval) clearInterval(state.recordingInterval); // Limpa timer anterior
    const timerElement = document.getElementById('recordingTime');
    if(!timerElement) return;

    state.recordingInterval = window.setInterval(() => { // Usar window.setInterval para tipo number
        if (!state.recordingStartTime) return;
        const elapsedSeconds = Math.floor((Date.now() - state.recordingStartTime) / 1000);
        const hours = Math.floor(elapsedSeconds / 3600);
        const minutes = Math.floor((elapsedSeconds % 3600) / 60);
        const seconds = elapsedSeconds % 60;
        timerElement.textContent = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;
    }, 1000);
}

/** Para o timer da gravação */
function stopTimer(): void {
    if (state.recordingInterval) {
        clearInterval(state.recordingInterval);
        state.recordingInterval = null;
    }
}

/** Inicia o visualizador de áudio */
function startVisualizer(): void {
    if (!state.analyser || !state.audioContext || state.audioContext.state === 'suspended' || !state.visualizerSource) {
        console.warn("AudioContext/Analyser/Source não disponível/pronto, não iniciando visualizador.");
        return;
    }

    const visualizerBars = document.getElementById('visualizerBars');
    if (!visualizerBars) return;
    visualizerBars.innerHTML = ''; // Limpa barras antigas

    const bufferLength = state.analyser.frequencyBinCount;
    const dataArray = new Uint8Array(bufferLength);
    const barCount = 30;

    for (let i = 0; i < barCount; i++) {
        const bar = document.createElement('div');
        bar.className = 'visualizer-bar';
        visualizerBars.appendChild(bar);
    }
    const bars = visualizerBars.childNodes as NodeListOf<HTMLDivElement>;

    const draw = () => {
        // Verifica se ainda deve desenhar
        if (!state.isRecording || !state.analyser) {
             stopVisualizer(); // Para o loop se a gravação parou ou analyser sumiu
             return;
        }

        state.visualizerRafId = requestAnimationFrame(draw);
        state.analyser.getByteFrequencyData(dataArray);

        const barHeightMultiplier = visualizerBars.clientHeight / 128;
        const step = Math.floor(bufferLength / barCount);

        for (let i = 0; i < barCount; i++) {
            let sum = 0;
            for (let j = 0; j < step; j++) {
                sum += dataArray[i * step + j];
            }
            let avg = sum / step || 0; // Evita NaN
            let barHeight = Math.max(1, Math.min(avg * barHeightMultiplier * 1.5, visualizerBars.clientHeight));
            if (bars[i]) {
                bars[i].style.height = `${barHeight}px`;
            }
        }
    };

    // Reinicia o RAF ID antes de chamar draw
    if(state.visualizerRafId) cancelAnimationFrame(state.visualizerRafId);
    state.visualizerRafId = null;
    draw();
}

/** Para o visualizador de áudio */
function stopVisualizer(): void {
    if (state.visualizerRafId) {
        cancelAnimationFrame(state.visualizerRafId);
        state.visualizerRafId = null;
    }
    // Não desconectar a source aqui, pois ela pode ser necessária para parar o stream
    // A desconexão e parada do stream ocorrem em stopRecording ou resetRecording

    const visualizerBars = document.getElementById('visualizerBars');
    if (visualizerBars) {
        gsap.to(".visualizer-bar", { height: 1, duration: 0.3, ease: 'power1.out', stagger: 0.01 });
    }
    console.log("Visualizador parado.");
}


// --- Upload de Arquivo ---

/** Configura o módulo de upload de arquivos */
function setupUpload(): void {
    const uploadArea = document.getElementById('uploadArea');
    const uploadInput = document.getElementById('uploadInput') as HTMLInputElement | null;
    const removeBtn = document.getElementById('uploadRemoveBtn');
    const processBtn = document.getElementById('processUploadBtn');

    if (!uploadArea || !uploadInput || !removeBtn || !processBtn) {
        console.error("Elementos de upload não encontrados.");
        return;
    }

    uploadArea.addEventListener('click', () => uploadInput.click());

    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        uploadArea.addEventListener(eventName, preventDefaults, false);
        document.body.addEventListener(eventName, preventDefaults, false);
    });
    ['dragenter', 'dragover'].forEach(eventName => {
        uploadArea.addEventListener(eventName, () => uploadArea.classList.add('dragover'), false);
    });
    ['dragleave', 'drop'].forEach(eventName => {
        uploadArea.addEventListener(eventName, () => uploadArea.classList.remove('dragover'), false);
    });

    uploadArea.addEventListener('drop', (e: DragEvent) => {
        const dt = e.dataTransfer;
        const files = dt?.files;
        if (files?.length) {
            handleFiles(files);
        }
    }, false);

    uploadInput.addEventListener('change', (e: Event) => {
        const target = e.target as HTMLInputElement;
        if (target.files?.length) {
            handleFiles(target.files);
        }
    });

    removeBtn.addEventListener('click', resetUpload);

    processBtn.addEventListener('click', () => {
        if (state.uploadedFile) {
            simulateProcessing('upload');
        } else {
            showToast('error', 'Erro', 'Nenhum arquivo selecionado para processar.');
        }
    });
}

/** Impede comportamentos padrão de drag & drop */
function preventDefaults(e: Event): void {
    e.preventDefault();
    e.stopPropagation();
}

/** Lida com os arquivos selecionados/soltos */
function handleFiles(files: FileList): void {
    if (files.length > 1) {
        showToast('warning', 'Apenas um arquivo', 'Por favor, envie apenas um arquivo por vez.');
        return;
    }
    const file = files[0];
    // TODO: Validação de tipo de arquivo (ex: audio/*, text/plain)
    if (!file.type.startsWith('audio/') && file.type !== 'text/plain') {
         showToast('warning', 'Tipo Inválido', 'Apenas arquivos de áudio ou texto plano são suportados.');
         resetUpload(); // Limpa se o tipo for inválido
         return;
    }
    console.log("Arquivo selecionado:", file.name, file.size, file.type);

    state.uploadedFile = file;

    const preview = document.getElementById('uploadPreview');
    const fileNameEl = document.getElementById('uploadFileName');
    const fileMetaEl = document.getElementById('uploadFileMeta');
    const processBtn = document.getElementById('processUploadBtn');
    const iconEl = preview?.querySelector<HTMLElement>('.upload-preview-icon i');

    if (preview && fileNameEl && fileMetaEl && processBtn && iconEl) {
        fileNameEl.textContent = escapeHtml(file.name);
        fileMetaEl.textContent = `${(file.size / (1024 * 1024)).toFixed(1)} MB`;

        if (file.type.startsWith('audio/')) {
            iconEl.className = 'fas fa-file-audio';
        } else if (file.type === 'text/plain') {
            iconEl.className = 'fas fa-file-alt';
        } else {
            iconEl.className = 'fas fa-file'; // Fallback
        }

        gsap.to(preview, { display: 'flex', opacity: 1, duration: 0.3 });
        gsap.to(processBtn, { display: 'inline-flex', opacity: 1, duration: 0.3 });
        // document.getElementById('uploadArea')?.style.display = 'none'; // Opcional
    }
    // Limpa o input para permitir selecionar o mesmo arquivo novamente
    const uploadInput = document.getElementById('uploadInput') as HTMLInputElement | null;
    if(uploadInput) uploadInput.value = '';
}

/** Reseta o estado do upload e a UI */
function resetUpload(): void {
    console.log("Resetando upload.");
    state.uploadedFile = null;
    const preview = document.getElementById('uploadPreview');
    const processBtn = document.getElementById('processUploadBtn');
    const uploadProgress = document.getElementById('uploadProgress');
    const uploadSteps = document.getElementById('uploadTranscriptionSteps');
    const uploadCompleted = document.getElementById('uploadCompletedPanel');
    const uploadInput = document.getElementById('uploadInput') as HTMLInputElement | null;

    if (preview) gsap.to(preview, { opacity: 0, duration: 0.2, onComplete: () => preview.style.display = 'none' });
    if (processBtn) gsap.to(processBtn, { opacity: 0, duration: 0.2, onComplete: () => processBtn.style.display = 'none' });
    if (uploadProgress) uploadProgress.style.display = 'none';
    if (uploadSteps) uploadSteps.style.display = 'none';
    if (uploadCompleted) uploadCompleted.style.display = 'none';
    if (uploadInput) uploadInput.value = '';
    // document.getElementById('uploadArea')?.style.display = 'block'; // Opcional
}


// --- Transcrição Manual ---

/** Configura a aba de transcrição manual */
function setupTranscriptionInput(): void {
    const processBtn = document.getElementById('processManualTranscriptionBtn');
    const textarea = document.getElementById('transcriptionText') as HTMLTextAreaElement | null;

    if (processBtn && textarea) {
        processBtn.addEventListener('click', () => {
            const text = textarea.value.trim();
            if (text) {
                // Salva a transcrição manual no estado para uso posterior
                state.transcriptionText = text;
                simulateProcessing('manual');
            } else {
                showToast('warning', 'Texto Vazio', 'Por favor, digite ou cole a transcrição.');
                textarea.focus();
            }
        });
    }
}

// --- Simulação de Processamento e Geração ---

/** Define o estado de processamento e atualiza a UI globalmente */
function setProcessingState(isProcessing: boolean): void {
    state.isProcessing = isProcessing;
    const elementsToToggle = document.querySelectorAll<HTMLButtonElement | HTMLAnchorElement | HTMLInputElement | HTMLTextAreaElement>(`
        .sidebar-link, .mobile-menu-item, #sidebarToggle, #mobileMenuBtn,
        .library-btn, .document-item, .toolbar-btn, .patient-tab,
        #startRecordingBtn, #stopRecordingBtn, #processRecordingBtn,
        #uploadArea, #uploadInput, #processUploadBtn,
        #processManualTranscriptionBtn, #startProcessingBtn,
        .document-format-option, .dimensional-tab, .modal-close, .modal-footer button,
        .document-action-btn, .nav-item
    `); // Seletores mais abrangentes
    elementsToToggle.forEach(el => {
        el.disabled = isProcessing;
        el.classList.toggle('disabled', isProcessing);
    });
    console.log(`Estado de processamento: ${isProcessing}`);
}

/**
 * Simula o processamento de um documento (gravação, upload, manual).
 * @param type - O tipo de origem.
 */
async function simulateProcessing(type: 'recording' | 'upload' | 'manual'): Promise<void> {
    if (state.isProcessing) return;
    setProcessingState(true);
    console.log(`Simulando processamento para: ${type}`);

    // Seleciona os elementos corretos
    const progressContainerId = `${type}Progress`;
    const stepsContainerId = `${type}TranscriptionSteps`;
    const stepsProgressId = `${type}TranscriptionStepsProgress`;
    const completedPanelId = `${type}CompletedPanel`;
    const progressBarId = `${type}ProgressBar`;
    const percentageId = `${type}ProgressPercentage`;
    const statusId = `${type}ProgressStatus`;
    const previewId = `${type}Preview`;
    const actionButtonId = type === 'recording' ? 'processRecordingBtn' : (type === 'upload' ? 'processUploadBtn' : 'processManualTranscriptionBtn');
    const livePreviewId = 'liveTranscriptionPreview'; // ID unificado para gravação/upload

    const progressContainer = document.getElementById(progressContainerId);
    const stepsContainer = document.getElementById(stepsContainerId);
    const completedPanel = document.getElementById(completedPanelId);
    const previewContainer = document.getElementById(previewId);
    const actionButton = document.getElementById(actionButtonId);
    const livePreview = document.getElementById(livePreviewId);
    const manualTextarea = document.getElementById('transcriptionText') as HTMLTextAreaElement | null;

    // Esconde botão de ação e preview (se aplicável)
    if (actionButton) gsap.to(actionButton, { opacity: 0, duration: 0.2, onComplete: () => actionButton.style.display = 'none' });
    if (previewContainer && type !== 'manual') gsap.to(previewContainer, { opacity: 0, duration: 0.2, onComplete: () => previewContainer.style.display = 'none' });
    if (type === 'manual' && manualTextarea) manualTextarea.disabled = true;

    // Mostra indicadores de progresso
    if (progressContainer) progressContainer.style.display = 'block';
    if (stepsContainer) stepsContainer.style.display = 'block';
    if (livePreview && (type === 'recording' || type === 'upload')) {
         livePreview.style.display = 'block';
         livePreview.innerHTML = '<p><i>Iniciando análise...</i><span class="typing"></span></p>';
    }

    // Simulação dos passos
    const steps = [
        { name: type === 'upload' ? 'Upload' : (type === 'manual' ? 'Validação' : 'Processando Áudio'), duration: 1000, text: 'Analisando dados...' },
        { name: type === 'manual' ? 'Processamento' : 'Transcrição', duration: 2000, text: 'Realizando transcrição...' },
        { name: type === 'manual' ? 'Análise' : 'Diarização', duration: 1500, text: 'Identificando segmentos...' },
        { name: 'Finalização', duration: 500, text: 'Gerando documento...' }
    ];

    let totalDuration = steps.reduce((sum, step) => sum + step.duration, 0);
    let elapsed = 0;

    // Simula a transcrição (usando texto de exemplo)
    const simulatedTranscription = state.transcriptionText || `Transcrição simulada para ${type} - ${new Date().toLocaleTimeString()}. Médico: ... Paciente: ...`;
    state.transcriptionText = simulatedTranscription; // Atualiza o estado com a transcrição (simulada ou manual)

    for (let i = 0; i < steps.length; i++) {
        const step = steps[i];
        updateStepProgress(stepsContainerId, stepsProgressId, i + 1);
        updateProgressBar(progressBarId, percentageId, statusId, (elapsed / totalDuration) * 100, step.name);
        if (livePreview && (type === 'recording' || type === 'upload')) {
            livePreview.innerHTML = `<p><i>${step.text}</i><span class="typing"></span></p>`;
            livePreview.scrollTop = livePreview.scrollHeight;
        }

        await new Promise(resolve => setTimeout(resolve, step.duration));
        elapsed += step.duration;

        if (i < steps.length - 1) {
            updateStepProgress(stepsContainerId, stepsProgressId, i + 1, true);
        }
    }

    updateProgressBar(progressBarId, percentageId, statusId, 100, 'Concluído');
    updateStepProgress(stepsContainerId, stepsProgressId, steps.length, true);
    if (livePreview && (type === 'recording' || type === 'upload')) {
        livePreview.innerHTML = `<p><i>Transcrição finalizada.</i></p>`;
    }

    // Adiciona o documento processado (transcrição) ao estado
    const originalFileName = type === 'upload' ? state.uploadedFile?.name : (type === 'recording' ? document.getElementById('recordingFileName')?.textContent : 'Transcricao_Manual');
    const newDocId = addProcessedDocument(originalFileName || 'Documento', type);
    if(newDocId) {
        state.currentDocumentId = newDocId; // Define o documento recém-criado como ativo
    } else {
        console.error("Falha ao criar ID para o novo documento de transcrição.");
        // Lidar com o erro - talvez mostrar um toast e resetar
        setProcessingState(false);
        showToast('error', 'Erro Interno', 'Não foi possível salvar a transcrição processada.');
        // Resetar a UI específica do tipo de processamento
        if (type === 'recording') resetRecording();
        else if (type === 'upload') resetUpload();
        else if (type === 'manual' && manualTextarea) manualTextarea.disabled = false;
        return; // Interrompe a função aqui
    }


    // Esconde progresso e mostra painel de conclusão
    if (progressContainer) progressContainer.style.display = 'none';
    if (stepsContainer) stepsContainer.style.display = 'none';
    if (livePreview) livePreview.style.display = 'none';
    if (completedPanel) {
        completedPanel.classList.add('active');
        completedPanel.style.display = 'flex';
    }
    if (type === 'manual' && manualTextarea) manualTextarea.disabled = false;

    setProcessingState(false);
    console.log(`Processamento de ${type} concluído. Novo Documento ID: ${newDocId}`);
}

/** Adiciona um documento de transcrição processado à lista */
function addProcessedDocument(originalFileName: string, sourceType: 'recording' | 'upload' | 'manual'): string | null {
    const now = new Date();
    const dateStr = now.toLocaleDateString('pt-BR'); // dd/mm/yyyy
    const timeStr = now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
    const safeName = originalFileName.replace(/\.[^/.]+$/, ""); // Remove extensão
    const newId = `doc${Date.now()}`; // ID único

    // Usa o state.transcriptionText que foi atualizado/simulado em simulateProcessing
    const contentSize = state.transcriptionText ? (state.transcriptionText.length / 1024).toFixed(1) : '0.0';

    const newDoc: DocumentMetadata = {
        id: newId,
        patientId: state.currentPatientId || null, // Associa ao paciente atual, se houver
        title: `Transcrição_${safeName}.txt`,
        type: 'transcription',
        date: dateStr,
        time: timeStr,
        icon: 'fas fa-file-alt',
        color: 'var(--accent)',
        size: `${contentSize} KB`
    };

    // Verifica se já existe um documento com o mesmo ID (improvável, mas seguro)
    if (state.documents.some(doc => doc.id === newId)) {
        console.error("Erro: Tentativa de adicionar documento com ID duplicado:", newId);
        return null; // Retorna null para indicar falha
    }

    state.documents.push(newDoc);
    console.log("Novo documento de transcrição adicionado:", newDoc);

    // Opcional: Atualizar UI se necessário (ex: biblioteca)
    if (state.currentView === 'library') {
        renderDocumentLibrary();
    }
     // Atualiza documentos do paciente se a aba estiver ativa
    if (state.currentView === 'patient' && state.activePatientTab === 'repository-panel') {
        renderPatientDocuments();
    }

    return newId; // Retorna o ID do novo documento
}

/** Atualiza a UI dos indicadores de passo */
function updateStepProgress(stepsContainerId: string, progressIndicatorId: string, currentStep: number, completed: boolean = false): void {
    const stepsContainer = document.getElementById(stepsContainerId);
    const progressIndicator = document.getElementById(progressIndicatorId);
    if (!stepsContainer || !progressIndicator) return;

    const steps = stepsContainer.querySelectorAll<HTMLElement>('.transcription-step');
    steps.forEach((step, index) => {
        const stepNumber = index + 1;
        step.classList.remove('active', 'completed');
        if (stepNumber < currentStep || (stepNumber === currentStep && completed)) {
            step.classList.add('completed');
        } else if (stepNumber === currentStep && !completed) {
            step.classList.add('active');
        }
    });

    const progressPercentage = completed ? ((currentStep) / steps.length) * 100 : ((currentStep - 0.5) / steps.length) * 100;
    progressIndicator.style.width = `${Math.min(100, progressPercentage)}%`;
}

/** Atualiza a UI da barra de progresso */
function updateProgressBar(barId: string, percentageId: string, statusId: string, percentage: number, statusText: string): void {
    const bar = document.getElementById(barId);
    const percentEl = document.getElementById(percentageId);
    const statusEl = document.getElementById(statusId);

    if (bar) bar.style.width = `${Math.min(percentage, 100)}%`;
    if (percentEl) percentEl.textContent = `${Math.round(Math.min(percentage, 100))}%`;
    if (statusEl) statusEl.textContent = statusText;
}


// --- View: Processamento (#processing-view) ---

/** Configura a view de processamento de documentos */
function setupProcessing(): void {
    const optionsContainer = document.querySelector<HTMLElement>('#processing-view .document-format-options');
    const startBtn = document.getElementById('startProcessingBtn');
    // O botão viewResultsBtn já é tratado no setupEventListeners global

    if (optionsContainer) {
        optionsContainer.addEventListener('click', (e: MouseEvent) => {
            const option = (e.target as Element)?.closest<HTMLDivElement>('.document-format-option');
            if (option) {
                option.classList.toggle('active');
            }
        });
    }

    if (startBtn) {
        startBtn.addEventListener('click', () => {
            if (!optionsContainer) return;
            const selectedFormats = Array.from(optionsContainer.querySelectorAll<HTMLDivElement>('.document-format-option.active'))
                .map(el => el.dataset.format as DocumentType)
                .filter(format => format); // Filtra undefined/null

            if (selectedFormats.length === 0) {
                showToast('warning', 'Nenhum Formato', 'Selecione pelo menos um formato para gerar.');
                return;
            }
            if (!state.currentDocumentId) {
                showToast('error', 'Erro', 'Nenhum documento base selecionado para processamento.');
                window.switchView('library');
                return;
            }
            simulateGeneration(selectedFormats);
        });
    }
}

/**
 * Simula a geração dos documentos selecionados.
 * @param formats - Array com os tipos de formato selecionados.
 */
async function simulateGeneration(formats: DocumentType[]): Promise<void> {
    if (state.isProcessing) return;
    setProcessingState(true);
    console.log(`Simulando geração para formatos: ${formats.join(', ')}`);

    const progressContainer = document.getElementById('processingProgress');
    const completedPanel = document.getElementById('processingCompletedPanel');
    const startBtn = document.getElementById('startProcessingBtn');
    const optionsContainer = document.querySelector<HTMLElement>('#processing-view .document-format-options');

    // Esconde botão e opções, mostra progresso
    if (startBtn) startBtn.style.display = 'none';
    if (optionsContainer) optionsContainer.style.display = 'none';
    if (progressContainer) progressContainer.style.display = 'block';

    const totalSteps = formats.length;
    let currentStep = 0;
    const stepDuration = 1500; // Duração por formato

    for (const format of formats) {
        currentStep++;
        const statusText = `Gerando ${format.charAt(0).toUpperCase() + format.slice(1)}... (${currentStep}/${totalSteps})`;
        const percentage = (currentStep / totalSteps) * 100;
        updateProgressBar('processingProgressBar', 'processingProgressPercentage', 'processingProgressStatus', percentage, statusText);

        // Simula tempo de geração
        await new Promise(resolve => setTimeout(resolve, stepDuration));

        // Adiciona o documento gerado ao estado (simulação)
        // Em um app real, aqui ocorreria a chamada API e a resposta traria o conteúdo
        // Por ora, usamos o conteúdo de exemplo já no state
        addGeneratedDocument(format);
    }

    updateProgressBar('processingProgressBar', 'processingProgressPercentage', 'processingProgressStatus', 100, 'Concluído');

    // Esconde progresso, mostra painel de conclusão
    if (progressContainer) progressContainer.style.display = 'none';
    if (completedPanel) {
        completedPanel.classList.add('active');
        completedPanel.style.display = 'flex';
    }

    setProcessingState(false);
    console.log("Geração de documentos concluída.");
}

/** Adiciona um documento gerado (VINTRA, SOAP, etc.) à lista */
function addGeneratedDocument(formatType: DocumentType): void {
    const baseDoc = state.documents.find(d => d.id === state.currentDocumentId);
    if (!baseDoc) {
        console.error("Documento base não encontrado para gerar formato:", formatType);
        return;
    }

    const now = new Date();
    const dateStr = now.toLocaleDateString('pt-BR');
    const timeStr = now.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
    const baseTitle = baseDoc.title.replace(/\.(txt|mp3|wav|m4a)$/i, '');
    const newId = `doc${Date.now()}_${formatType}`; // ID mais específico

    let icon = 'fas fa-file-medical-alt';
    let color = 'var(--gray-600)';
    switch(formatType) {
        case 'vintra': icon = 'fas fa-clipboard-list'; color = 'var(--accent)'; break;
        case 'soap': icon = 'fas fa-notes-medical'; color = 'var(--success)'; break;
        case 'ipissima': icon = 'fas fa-comment-dots'; color = 'var(--accent-pink)'; break;
        case 'narrative': icon = 'fas fa-book-open'; color = 'var(--warning-yellow)'; break;
        case 'orientacoes': icon = 'fas fa-list-check'; color = '#8B5CF6'; break;
    }

    // Pega o conteúdo (de exemplo) do estado
    const content = getDocumentContent(formatType);
    if (content === null) {
        console.error(`Conteúdo de exemplo para '${formatType}' não encontrado.`);
        // Poderia criar um documento vazio ou com placeholder
        return;
    }
    const contentSize = (content.length / 1024).toFixed(1);

    const newDoc: DocumentMetadata = {
        id: newId,
        patientId: baseDoc.patientId,
        title: `${formatType.toUpperCase()}_${baseTitle}.txt`,
        type: formatType,
        date: dateStr,
        time: timeStr,
        icon: icon,
        color: color,
        size: `${contentSize} KB`
    };

    // Evita adicionar duplicatas exatas (mesmo ID)
     if (!state.documents.some(doc => doc.id === newId)) {
        state.documents.push(newDoc);
        console.log(`Novo documento gerado (${formatType}) adicionado:`, newDoc);

        // Atualiza UI relevante
        if (state.currentView === 'library') {
            renderDocumentLibrary();
        }
        if (state.currentView === 'patient' && state.activePatientTab === 'repository-panel') {
            renderPatientDocuments();
        }
        // Se a view de resultados estiver ativa, potencialmente atualizar as abas/conteúdo
        if (state.currentView === 'results') {
            // Poderia adicionar a tab dinamicamente ou apenas atualizar o conteúdo se a tab já existir
            // Por simplicidade, vamos assumir que as tabs são fixas e o conteúdo será atualizado quando a tab for clicada
        }
    } else {
         console.warn(`Documento com ID ${newId} já existe. Geração ignorada.`);
    }
}

/** Inicia o fluxo de processamento a partir de um documento da biblioteca */
function startProcessingDocument(docId: string): void {
    const doc = state.documents.find(d => d.id === docId);
    if (!doc) {
        showToast('error', 'Erro', 'Documento não encontrado.');
        return;
    }

    if (doc.type !== 'audio' && doc.type !== 'transcription') {
        showToast('info', 'Não Processável', `Documentos do tipo '${doc.type}' não podem ser usados para gerar formatos VINTRA.`);
        return;
    }

    console.log(`Iniciando fluxo de processamento para: ${doc.title}`);
    state.currentDocumentId = docId; // Define como documento base

    // Atualiza o título na view de processamento
    const titleElement = document.getElementById('processingDocumentTitle');
    if (titleElement) {
        titleElement.textContent = escapeHtml(doc.title);
    }

    // Reseta a UI da view de processamento
    const optionsContainer = document.querySelector<HTMLElement>('#processing-view .document-format-options');
    const startBtn = document.getElementById('startProcessingBtn');
    const progressContainer = document.getElementById('processingProgress');
    const completedPanel = document.getElementById('processingCompletedPanel');

    if(optionsContainer) {
        optionsContainer.style.display = 'flex';
        // Reseta seleção (deixa VINTRA e SOAP ativos por padrão, por exemplo)
        optionsContainer.querySelectorAll<HTMLDivElement>('.document-format-option').forEach(opt => {
            const format = opt.dataset.format;
            opt.classList.toggle('active', format === 'vintra' || format === 'soap');
        });
    }
    if(startBtn) startBtn.style.display = 'inline-flex';
    if(progressContainer) progressContainer.style.display = 'none';
    if(completedPanel) completedPanel.style.display = 'none';

    window.switchView('processing');
}


// --- View: Resultados (#results-view) ---

/** Configura a view de resultados */
function setupResultsView(): void {
    const tabsContainer = document.querySelector<HTMLElement>('#results-view .document-tabs');
    const downloadBtn = document.getElementById('downloadResultsBtn');
    const editBtn = document.getElementById('editResultBtn'); // Botão Editar na toolbar de resultados

    if (tabsContainer) {
        tabsContainer.addEventListener('click', (e: MouseEvent) => {
            const tab = (e.target as Element)?.closest<HTMLButtonElement>('.document-tab');
            if (tab?.dataset.panel && !tab.classList.contains('active')) {
                activateResultsTab(tab.dataset.panel);
            }
        });
    }

    if (downloadBtn) {
        downloadBtn.addEventListener('click', () => {
            // Encontra o documento correspondente à aba ativa
            const activeDocType = state.activeResultsTab.replace('-panel', '') as DocumentType;
            // Assume que o último documento gerado desse tipo é o relevante
            // (Idealmente, a view de resultados estaria ligada a um processamento específico)
            const relevantDoc = state.documents
                                   .filter(d => d.type === activeDocType && d.patientId === state.currentPatientId) // Filtra por tipo e paciente (se houver)
                                   .sort((a, b) => parseDate(b.date, b.time).getTime() - parseDate(a.date, a.time).getTime())[0]; // Pega o mais recente

            if (relevantDoc) {
                downloadDocument(relevantDoc.id);
            } else {
                showToast('warning', 'Download Indisponível', `Não foi possível encontrar o documento '${activeDocType}' para download.`);
            }
        });
    }

     if (editBtn) {
        editBtn.addEventListener('click', () => {
             const activeDocType = state.activeResultsTab.replace('-panel', '') as DocumentType;
             // Encontra o documento mais recente do tipo ativo
             const relevantDoc = state.documents
                                    .filter(d => d.type === activeDocType && d.patientId === state.currentPatientId)
                                    .sort((a, b) => parseDate(b.date, b.time).getTime() - parseDate(a.date, a.time).getTime())[0];

             if (relevantDoc) {
                 editDocument(relevantDoc.id); // Chama a função de edição existente
             } else {
                 showToast('warning', 'Edição Indisponível', `Não foi possível encontrar o documento '${activeDocType}' para edição.`);
             }
        });
     }
}

/** Ativa uma aba específica na view de resultados */
function activateResultsTab(panelId: string): void {
    console.log(`Ativando aba de resultados: ${panelId}`);
    state.activeResultsTab = panelId;

    // Atualiza estilo das abas
    document.querySelectorAll<HTMLButtonElement>('#results-view .document-tab').forEach(tab => {
        tab.classList.toggle('active', tab.dataset.panel === panelId);
    });

    // Animação de troca de painéis
    const panelsContainer = document.querySelector<HTMLElement>('#results-view .document-tab-panels');
    const activePanel = document.getElementById(panelId);
    const currentActivePanel = panelsContainer?.querySelector<HTMLElement>('.document-tab-panel.active');

    if (!activePanel) {
        console.error(`Painel de resultados não encontrado: ${panelId}`);
        return;
    }

    // Pega o tipo de documento da aba e busca o conteúdo mais recente
    const docType = panelId.replace('-panel', '') as DocumentType;
    const content = getDocumentContent(docType) ?? `Conteúdo para '${docType}' não disponível.`; // Usará o conteúdo do state (exemplo)

    // Atualiza o conteúdo dentro do painel ativo
    const contentElement = activePanel.querySelector<HTMLDivElement>('.document-view');
    if (contentElement) {
        contentElement.innerHTML = `<pre>${escapeHtml(content)}</pre>`;
    } else {
        console.warn(`Elemento .document-view não encontrado em #${panelId}`);
        // Fallback: Insere estrutura básica se não existir
        activePanel.innerHTML = `<div class="document-content"><div class="document-container"><div class="document-view"><pre>${escapeHtml(content)}</pre></div></div></div>`;
    }

    // Habilita/desabilita botão de edição baseado no tipo
    const editBtn = document.getElementById('editResultBtn');
    if(editBtn) {
        const isEditable = ['transcription', 'vintra', 'soap', 'ipissima', 'narrative', 'orientacoes'].includes(docType);
        (editBtn as HTMLButtonElement).disabled = !isEditable;
        editBtn.style.display = isEditable ? 'inline-flex' : 'none';
    }


    const showActivePanel = () => {
        gsap.set(activePanel, { display: 'block', opacity: 0 });
        activePanel.classList.add('active');
        activePanel.scrollTop = 0;

        gsap.to(activePanel, {
            opacity: 1,
            duration: 0.3,
            ease: "power1.out"
        });
    };

    if (currentActivePanel && currentActivePanel !== activePanel) {
        gsap.to(currentActivePanel, {
            opacity: 0,
            duration: 0.2,
            ease: "power1.in",
            onComplete: () => {
                currentActivePanel.classList.remove('active');
                currentActivePanel.style.display = 'none';
                showActivePanel();
            }
        });
    } else if (!currentActivePanel) {
        showActivePanel();
    }
}


// --- Biblioteca de Documentos ---

/** Configura a interatividade da biblioteca (filtros, busca) */
function setupDocumentLibrary(): void {
    const filtersContainer = document.querySelector<HTMLElement>('#library-view .library-filters');
    const searchInput = document.querySelector<HTMLInputElement>('#library-view .library-search-input');

    if (filtersContainer) {
        filtersContainer.addEventListener('click', (e: MouseEvent) => {
            const filterBtn = (e.target as Element)?.closest<HTMLButtonElement>('.library-filter');
            if (filterBtn && !filterBtn.classList.contains('active')) {
                filtersContainer.querySelector('.library-filter.active')?.classList.remove('active');
                filterBtn.classList.add('active');
                renderDocumentLibrary(filterBtn.dataset.filter || 'all', searchInput?.value || '');
            }
        });
    }

    if (searchInput) {
        searchInput.addEventListener('input', debounce(() => {
            const activeFilter = filtersContainer?.querySelector('.library-filter.active')?.dataset.filter || 'all';
            renderDocumentLibrary(activeFilter, searchInput.value);
        }, 300));
    }
}

// --- Notificações Toast ---

/** Mostra uma notificação toast */
function showToast(type: 'success' | 'error' | 'warning' | 'info', title: string, message: string, duration: number = 5000): void {
    const container = document.getElementById('toastContainer');
    if (!container) return;

    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;

    let iconClass = 'fas fa-info-circle';
    if (type === 'success') iconClass = 'fas fa-check-circle';
    else if (type === 'error') iconClass = 'fas fa-times-circle';
    else if (type === 'warning') iconClass = 'fas fa-exclamation-triangle';

    toast.innerHTML = `
        <div class="toast-icon ${type}"> <i class="${iconClass}"></i> </div>
        <div class="toast-content">
            <div class="toast-title">${escapeHtml(title)}</div>
            <div class="toast-message">${escapeHtml(message)}</div>
        </div>
        <button class="toast-close"> <i class="fas fa-times"></i> </button>
    `;

    toast.querySelector<HTMLButtonElement>('.toast-close')?.addEventListener('click', () => removeToast(toast));
    container.appendChild(toast);

    gsap.fromTo(toast,
        { opacity: 0, y: 20, scale: 0.9 },
        { opacity: 1, y: 0, scale: 1, duration: 0.4, ease: 'power2.out' }
    );

    setTimeout(() => removeToast(toast), duration);
}

/** Remove um toast específico com animação */
function removeToast(toastElement: HTMLElement): void {
    if (!toastElement?.parentNode) return;

    gsap.to(toastElement, {
        opacity: 0,
        y: 10,
        scale: 0.9,
        duration: 0.3,
        ease: 'power1.in',
        onComplete: () => {
            toastElement.remove();
        }
    });
}


// --- Modal Genérico ---

/** Configura o modal genérico */
function setupGenericModal(): void {
    const modalOverlay = document.getElementById('genericModal');
    const closeBtn = document.getElementById('genericModalClose');
    const cancelBtn = document.getElementById('genericModalCancelBtn'); // Botão padrão "Fechar"

    closeBtn?.addEventListener('click', hideGenericModal);
    cancelBtn?.addEventListener('click', hideGenericModal);
    if (modalOverlay) {
        modalOverlay.addEventListener('click', (e: MouseEvent) => {
            if (e.target === modalOverlay) {
                hideGenericModal();
            }
        });
    }
}

/** Mostra o modal genérico com título e conteúdo HTML */
function showGenericModal(title: string, htmlContent: string): void {
    const modal = document.getElementById('genericModal');
    const modalTitle = document.getElementById('genericModalTitle');
    const modalBody = document.getElementById('genericModalBody');

    if (modal && modalTitle && modalBody) {
        modalTitle.textContent = title;
        modalBody.innerHTML = htmlContent; // CUIDADO: Garanta que htmlContent seja seguro

        gsap.set(modal, { display: 'flex', opacity: 0 });
        gsap.to(modal, { opacity: 1, duration: 0.3, ease: 'power1.out' });
        gsap.fromTo(modal.querySelector('.modal-container'),
            { scale: 0.95, y: 10 },
            { scale: 1, y: 0, duration: 0.4, ease: 'power2.out' }
        );
    } else {
        console.error("Elementos do modal genérico não encontrados.");
    }
}

/** Esconde o modal genérico */
function hideGenericModal(): void {
    const modal = document.getElementById('genericModal');
    if (modal?.style.display !== 'none') {
        gsap.to(modal, {
            opacity: 0,
            duration: 0.3,
            ease: 'power1.in',
            onComplete: () => {
                if(modal) modal.style.display = 'none';
                const modalBody = document.getElementById('genericModalBody');
                if (modalBody) modalBody.innerHTML = '';
            }
        });
    }
}


// --- Utilitários ---

/** Debounce: Atraso na execução de uma função */
function debounce<T extends (...args: any[]) => any>(func: T, wait: number): (...args: Parameters<T>) => void {
    let timeout: number | null = null;
    return function executedFunction(...args: Parameters<T>): void {
        const later = () => {
            timeout = null;
            func(...args);
        };
        if (timeout !== null) {
            clearTimeout(timeout);
        }
        timeout = window.setTimeout(later, wait);
    };
}

/** Escapa HTML para prevenir XSS */
function escapeHtml(unsafe: any): string {
    if (typeof unsafe !== 'string') {
        try {
            unsafe = String(unsafe);
        } catch (e) {
            return '';
        }
    }
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

/** Converte string de data "dd/mm/yyyy" e opcionalmente hora "HH:MM" para objeto Date */
function parseDate(dateStr: string, timeStr?: string | null): Date {
    const parts = dateStr.split('/');
    const day = parseInt(parts[0], 10);
    const month = parseInt(parts[1], 10) - 1; // Mês é 0-indexado
    const year = parseInt(parts[2], 10);

    let hour = 0;
    let minute = 0;
    if (timeStr) {
        const timeParts = timeStr.split(':');
        hour = parseInt(timeParts[0], 10);
        minute = parseInt(timeParts[1], 10);
    }

    // Verifica se as partes são válidas antes de criar a data
    if (isNaN(day) || isNaN(month) || isNaN(year) || isNaN(hour) || isNaN(minute)) {
        console.warn(`Data/hora inválida encontrada: ${dateStr} ${timeStr || ''}. Retornando data atual.`);
        return new Date(); // Retorna data atual como fallback
    }

    return new Date(year, month, day, hour, minute);
}


// --- Funções de Ação Pós-Processamento (Exemplo) ---

/** Ação: Visualizar transcrição recém-processada na biblioteca */
function viewTranscription(): void {
    if (!state.currentDocumentId) {
        showToast('warning', 'Nenhum Documento', 'Nenhum documento de transcrição ativo para visualizar.');
        window.switchView('library');
        return;
    }
    const doc = state.documents.find(d => d.id === state.currentDocumentId && d.type === 'transcription');
    if (doc) {
        window.switchView('library');
        setTimeout(() => {
            setActiveDocumentItem(doc.id);
            viewDocumentInWorkspace(doc.id);
        }, 400); // Atraso para renderização da view
    } else {
        showToast('error', 'Erro', 'Transcrição não encontrada na biblioteca.');
        window.switchView('library');
    }
}

/** Ação: Ir para a view de processamento com a transcrição atual */
function processTranscription(): void {
    if (!state.currentDocumentId) {
        showToast('warning', 'Nenhum Documento', 'Nenhum documento de transcrição ativo para processar.');
        window.switchView('library');
        return;
    }
    const doc = state.documents.find(d => d.id === state.currentDocumentId && d.type === 'transcription');
    if (doc) {
        startProcessingDocument(doc.id); // Inicia fluxo de processamento
    } else {
        showToast('error', 'Erro', 'Documento de transcrição não encontrado para processar.');
        window.switchView('library');
    }
}

/* 
 * VINTRA - Correções CSS para Bugs de Interface
 * Para adicionar ao final do seu arquivo CSS atual
 */

/* -------------------------------------------- */
/* Correção para o Dashboard não aparecer       */
/* -------------------------------------------- */
#dashboard-view.active {
    display: block !important;
}

.workspace.active {
    display: block !important; /* Garantir que views ativas sejam visíveis */
}

#library-view.active {
    display: flex !important; /* Caso especial para o layout de biblioteca */
}

/* -------------------------------------------- */
/* Correção para a Sidebar não preencher altura */
/* -------------------------------------------- */
.app-main {
    flex: 1;
    display: flex;
    height: calc(100vh - 73px); /* Ajustar baseado na altura real do header */
    overflow: hidden;
    position: relative;
}

.app-sidebar {
    height: 100%;
    display: flex;
    flex-direction: column;
    flex-shrink: 0;
    position: sticky;
    top: 0;
    left: 0;
}

/* -------------------------------------------- */
/* Correção para os Toasts mal posicionados     */
/* -------------------------------------------- */
.toast-container {
    position: fixed;
    bottom: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 350px;
    pointer-events: none; /* Permite clicar através do container, mas não dos toasts */
}

.toast {
    width: 100%;
    margin-top: 8px;
    pointer-events: auto; /* Permite clicar no toast */
    box-shadow: var(--shadow-lg);
}

/* -------------------------------------------- */
/* Correção para o botão de login que "cresce"  */
/* -------------------------------------------- */
.btn-primary {
    transition: all var(--duration-md) var(--ease-out);
}

.btn-primary:hover:not(:disabled) {
    transform: translateY(-2px) scale(1.02);
}

.btn-primary:active {
    transform: translateY(0) scale(0.98);
}

.btn-primary:focus:not(:hover) {
    transform: none;
    box-shadow: 0 3px 12px rgba(0, 0, 0, 0.03), 0 1px 3px rgba(0, 0, 0, 0.01);
}

#loginForm .btn-primary {
    width: 100%; /* Garantir largura consistente */
    max-width: 100%;
    transition: transform 0.2s ease-out, box-shadow 0.2s ease-out;
}

/* -------------------------------------------- */
/* Correções para problemas de layout geral     */
/* -------------------------------------------- */
.document-workspace {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
}

.document-content {
    flex: 1;
    overflow-y: auto;
    max-height: calc(100vh - 130px); /* Ajustar conforme necessário */
}

/* Ajuste para containers do paciente */
.patient-panel {
    display: flex;
    flex-direction: column;
    height: 100%;
}

.patient-tab-panels {
    flex: 1;
    overflow: hidden;
}

.patient-tab-panel {
    height: 100%;
    overflow-y: auto;
}

/* -------------------------------------------- */
/* Correções para problemas de modal            */
/* -------------------------------------------- */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
}

.modal-container {
    max-height: 90vh;
    overflow-y: auto;
    width: 90%;
    max-width: 800px;
}

.document-editor {
    width: 100%;
    min-height: 300px;
    resize: vertical;
}

/* -------------------------------------------- */
/* Ajustes para Responsividade                  */
/* -------------------------------------------- */
@media (max-width: 768px) {
    .app-main {
        height: calc(100vh - 60px); /* Header menor em mobile */
    }
    
    .document-library {
        width: 100%; /* Full width em mobile */
        height: auto;
        max-height: 40vh;
    }
    
    #library-view.active {
        flex-direction: column;
    }
    
    .modal-container {
        width: 95%;
        max-height: 85vh;
    }
    
    .patient-tabs {
        overflow-x: auto;
        flex-wrap: nowrap;
        padding-bottom: 5px;
    }
}

/* -------------------------------------------- */
/* Debug Helper - Adicionar para testes         */
/* -------------------------------------------- */
.debug-outline * {
    outline: 1px solid rgba(255, 0, 0, 0.2);
}

.debug-active {
    border: 2px solid red !important;
}
